
Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000e2c  00000ec0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800078  00800078  00000ed8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000197e  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab5  00000000  00000000  00002a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001289  00000000  00000000  00003547  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  000047d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088c  00000000  00000000  00004bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dd7  00000000  00000000  0000545c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006233  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__vector_1>
   8:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__vector_2>
   c:	0c 94 28 04 	jmp	0x850	; 0x850 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 38       	cpi	r26, 0x85	; 133
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <main>
  8a:	0c 94 14 07 	jmp	0xe28	; 0xe28 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ISR_APP>:
	for(i=0 ; i<10 ; i++)
	{
		LED_voidToggle(&LED_TEST_2);
		TIMER_voidTimer0Delay(1000);
	}
}
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  98:	08 95       	ret

0000009a <APP_voidInit>:
  9a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <PORT_voidInit>
  9e:	0e 94 c2 03 	call	0x784	; 0x784 <EXTI_voidINT0Init>
  a2:	0e 94 be 03 	call	0x77c	; 0x77c <GIE_voidEnable>
  a6:	89 e4       	ldi	r24, 0x49	; 73
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 cc 03 	call	0x798	; 0x798 <EXTI_u8INT0SetCallBack>
  ae:	0e 94 5f 04 	call	0x8be	; 0x8be <TIMER_voidTimer0Init>
  b2:	08 95       	ret

000000b4 <pedestrianMode>:
	mode = PEDESTRIAN_MODE;		//Switching to pedestrian mode when the button is pressed
}


void pedestrianMode(void)
{
  b4:	cf 93       	push	r28
	/*Close all the leds of Traffic lights*/
	LED_u8TurnOff(&LED_RED_CARS);
  b6:	8e e6       	ldi	r24, 0x6E	; 110
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
	LED_u8TurnOff(&LED_YELLOW_CARS);
  be:	81 e7       	ldi	r24, 0x71	; 113
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
	LED_u8TurnOff(&LED_GREEN_CARS);
  c6:	84 e7       	ldi	r24, 0x74	; 116
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
	
	LED_u8TurnOff(&LED_RED_PEDESTRIAN);
  ce:	85 e6       	ldi	r24, 0x65	; 101
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
	LED_u8TurnOff(&LED_YELLOW_PEDESTRIAN);
  d6:	88 e6       	ldi	r24, 0x68	; 104
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
	LED_u8TurnOff(&LED_GREEN_PEDESTRIAN);
  de:	8b e6       	ldi	r24, 0x6B	; 107
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
	
	/*Checking in which state normal mode is interrupted*/
	switch(carTrafficState)
  e6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <carTrafficState>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	08 f4       	brcc	.+2      	; 0xf0 <pedestrianMode+0x3c>
  ee:	45 c0       	rjmp	.+138    	; 0x17a <pedestrianMode+0xc6>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	90 f0       	brcs	.+36     	; 0x118 <pedestrianMode+0x64>
  f4:	83 30       	cpi	r24, 0x03	; 3
  f6:	09 f0       	breq	.+2      	; 0xfa <pedestrianMode+0x46>
  f8:	40 c0       	rjmp	.+128    	; 0x17a <pedestrianMode+0xc6>
	{
		case CAR_RED_STATE:		//Normal mode is interrupted when the red led is on
		LED_u8TurnOn(&LED_GREEN_PEDESTRIAN);
  fa:	8b e6       	ldi	r24, 0x6B	; 107
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8TurnOn>
		LED_u8TurnOn(&LED_RED_CARS);
 102:	8e e6       	ldi	r24, 0x6E	; 110
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8TurnOn>
		TIMER_voidTimer0Delay(5000);
 10a:	68 e8       	ldi	r22, 0x88	; 136
 10c:	73 e1       	ldi	r23, 0x13	; 19
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 66 04 	call	0x8cc	; 0x8cc <TIMER_voidTimer0Delay>
		break;
 116:	31 c0       	rjmp	.+98     	; 0x17a <pedestrianMode+0xc6>
		
		case CAR_GREEN_STATE: case CAR_YELLOW_STATE:	//Normal mode is interrupted when the green led or yellow led are on
		LED_u8TurnOn(&LED_RED_PEDESTRIAN);
 118:	85 e6       	ldi	r24, 0x65	; 101
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8TurnOn>
		
		for(u8 i=0; i<5 ; i++)
 120:	c0 e0       	ldi	r28, 0x00	; 0
 122:	0f c0       	rjmp	.+30     	; 0x142 <pedestrianMode+0x8e>
		{
			LED_voidToggle(&LED_YELLOW_PEDESTRIAN);
 124:	88 e6       	ldi	r24, 0x68	; 104
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LED_voidToggle>
			LED_voidToggle(&LED_YELLOW_CARS);
 12c:	81 e7       	ldi	r24, 0x71	; 113
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LED_voidToggle>
			TIMER_voidTimer0Delay(1000);
 134:	68 ee       	ldi	r22, 0xE8	; 232
 136:	73 e0       	ldi	r23, 0x03	; 3
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 66 04 	call	0x8cc	; 0x8cc <TIMER_voidTimer0Delay>
		break;
		
		case CAR_GREEN_STATE: case CAR_YELLOW_STATE:	//Normal mode is interrupted when the green led or yellow led are on
		LED_u8TurnOn(&LED_RED_PEDESTRIAN);
		
		for(u8 i=0; i<5 ; i++)
 140:	cf 5f       	subi	r28, 0xFF	; 255
 142:	c5 30       	cpi	r28, 0x05	; 5
 144:	78 f3       	brcs	.-34     	; 0x124 <pedestrianMode+0x70>
		{
			LED_voidToggle(&LED_YELLOW_PEDESTRIAN);
			LED_voidToggle(&LED_YELLOW_CARS);
			TIMER_voidTimer0Delay(1000);
		}
		LED_u8TurnOff(&LED_RED_PEDESTRIAN);
 146:	85 e6       	ldi	r24, 0x65	; 101
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
		LED_u8TurnOff(&LED_YELLOW_PEDESTRIAN);
 14e:	88 e6       	ldi	r24, 0x68	; 104
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
		LED_voidToggle(&LED_YELLOW_CARS);
 156:	81 e7       	ldi	r24, 0x71	; 113
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LED_voidToggle>
		
		LED_u8TurnOn(&LED_RED_CARS);
 15e:	8e e6       	ldi	r24, 0x6E	; 110
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8TurnOn>
		LED_u8TurnOn(&LED_GREEN_PEDESTRIAN);
 166:	8b e6       	ldi	r24, 0x6B	; 107
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8TurnOn>
		TIMER_voidTimer0Delay(5000);
 16e:	68 e8       	ldi	r22, 0x88	; 136
 170:	73 e1       	ldi	r23, 0x13	; 19
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 66 04 	call	0x8cc	; 0x8cc <TIMER_voidTimer0Delay>
		break;
	}
	/*Finishing the two states by closing the red car led and blinking both yellow leds for 5 seconds while the green pedestrian led is still on*/
	LED_u8TurnOff(&LED_RED_CARS);
 17a:	8e e6       	ldi	r24, 0x6E	; 110
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
	for(u8 i=0; i<5 ; i++)
 182:	c0 e0       	ldi	r28, 0x00	; 0
 184:	0f c0       	rjmp	.+30     	; 0x1a4 <pedestrianMode+0xf0>
	{
		LED_voidToggle(&LED_YELLOW_PEDESTRIAN);
 186:	88 e6       	ldi	r24, 0x68	; 104
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LED_voidToggle>
		LED_voidToggle(&LED_YELLOW_CARS);
 18e:	81 e7       	ldi	r24, 0x71	; 113
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LED_voidToggle>
		TIMER_voidTimer0Delay(1000);
 196:	68 ee       	ldi	r22, 0xE8	; 232
 198:	73 e0       	ldi	r23, 0x03	; 3
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 66 04 	call	0x8cc	; 0x8cc <TIMER_voidTimer0Delay>
		TIMER_voidTimer0Delay(5000);
		break;
	}
	/*Finishing the two states by closing the red car led and blinking both yellow leds for 5 seconds while the green pedestrian led is still on*/
	LED_u8TurnOff(&LED_RED_CARS);
	for(u8 i=0; i<5 ; i++)
 1a2:	cf 5f       	subi	r28, 0xFF	; 255
 1a4:	c5 30       	cpi	r28, 0x05	; 5
 1a6:	78 f3       	brcs	.-34     	; 0x186 <pedestrianMode+0xd2>
	{
		LED_voidToggle(&LED_YELLOW_PEDESTRIAN);
		LED_voidToggle(&LED_YELLOW_CARS);
		TIMER_voidTimer0Delay(1000);
	}
	LED_u8TurnOff(&LED_YELLOW_PEDESTRIAN);
 1a8:	88 e6       	ldi	r24, 0x68	; 104
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
	LED_u8TurnOff(&LED_YELLOW_CARS);
 1b0:	81 e7       	ldi	r24, 0x71	; 113
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
	
	LED_u8TurnOff(&LED_GREEN_PEDESTRIAN);
 1b8:	8b e6       	ldi	r24, 0x6B	; 107
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
	LED_u8TurnOn(&LED_RED_PEDESTRIAN);
 1c0:	85 e6       	ldi	r24, 0x65	; 101
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8TurnOn>
	LED_u8TurnOn(&LED_GREEN_CARS);
 1c8:	84 e7       	ldi	r24, 0x74	; 116
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8TurnOn>
	mode = NORMAL_MODE;		//Going back to the Normal mode after the Pedestrian mode ends
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <APP_voidStart>:
	TIMER_voidTimer0Init();
	
}

void APP_voidStart(void)
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
	while(mode == NORMAL_MODE)			//Normal mode will be on until the pedestrian pressed the button
 1de:	42 c1       	rjmp	.+644    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	{
	carTrafficState = CAR_GREEN_STATE;	//Flag to know which color state in Car Traffic light 
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <carTrafficState>
	/*Turning Green led on for 5 second by making 100ms delay 50 times using for loop to check the mode continuously*/
	LED_u8TurnOn(&LED_GREEN_CARS);
 1e6:	84 e7       	ldi	r24, 0x74	; 116
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8TurnOn>
	for (u8 i=0 ; i<50 ; i++)
 1ee:	c0 e0       	ldi	r28, 0x00	; 0
 1f0:	49 c0       	rjmp	.+146    	; 0x284 <APP_voidStart+0xaa>
	{
		TIMER_voidTimer0Delay(100);
 1f2:	64 e6       	ldi	r22, 0x64	; 100
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 66 04 	call	0x8cc	; 0x8cc <TIMER_voidTimer0Delay>
		SW_u8GetState(&PedestrianSwitch,&ReadingState);
 1fe:	63 e8       	ldi	r22, 0x83	; 131
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	81 e6       	ldi	r24, 0x61	; 97
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 9f 02 	call	0x53e	; 0x53e <SW_u8GetState>
		/*Check for the press duration */
		while(ReadingState == SW_u8PRESSED)
 20a:	19 c0       	rjmp	.+50     	; 0x23e <APP_voidStart+0x64>
		{
			SW_u8GetState(&PedestrianSwitch,&ReadingState);
 20c:	63 e8       	ldi	r22, 0x83	; 131
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	81 e6       	ldi	r24, 0x61	; 97
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 9f 02 	call	0x53e	; 0x53e <SW_u8GetState>
			longPress++;
 218:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <longPress>
 21c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <longPress+0x1>
 220:	a0 91 7b 00 	lds	r26, 0x007B	; 0x80007b <longPress+0x2>
 224:	b0 91 7c 00 	lds	r27, 0x007C	; 0x80007c <longPress+0x3>
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	a1 1d       	adc	r26, r1
 22c:	b1 1d       	adc	r27, r1
 22e:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <longPress>
 232:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <longPress+0x1>
 236:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <longPress+0x2>
 23a:	b0 93 7c 00 	sts	0x007C, r27	; 0x80007c <longPress+0x3>
	for (u8 i=0 ; i<50 ; i++)
	{
		TIMER_voidTimer0Delay(100);
		SW_u8GetState(&PedestrianSwitch,&ReadingState);
		/*Check for the press duration */
		while(ReadingState == SW_u8PRESSED)
 23e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <ReadingState>
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	19 f3       	breq	.-58     	; 0x20c <APP_voidStart+0x32>
		{
			SW_u8GetState(&PedestrianSwitch,&ReadingState);
			longPress++;
		}
		if (longPress > MAX_PRESSED_DURATION)
 246:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <longPress>
 24a:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <longPress+0x1>
 24e:	a0 91 7b 00 	lds	r26, 0x007B	; 0x80007b <longPress+0x2>
 252:	b0 91 7c 00 	lds	r27, 0x007C	; 0x80007c <longPress+0x3>
 256:	81 3d       	cpi	r24, 0xD1	; 209
 258:	97 40       	sbci	r25, 0x07	; 7
 25a:	a1 05       	cpc	r26, r1
 25c:	b1 05       	cpc	r27, r1
 25e:	18 f0       	brcs	.+6      	; 0x266 <APP_voidStart+0x8c>
		{
			mode = NORMAL_MODE;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		/*Applying the Pedestrian mode for the short press*/
		if(mode == PEDESTRIAN_MODE)
 266:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	51 f4       	brne	.+20     	; 0x282 <APP_voidStart+0xa8>
		{
			LED_u8TurnOff(&LED_RED_PEDESTRIAN);
 26e:	85 e6       	ldi	r24, 0x65	; 101
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
			pedestrianMode();
 276:	0e 94 5a 00 	call	0xb4	; 0xb4 <pedestrianMode>
			pedestrianDone = 1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
			break;
 280:	04 c0       	rjmp	.+8      	; 0x28a <APP_voidStart+0xb0>
	while(mode == NORMAL_MODE)			//Normal mode will be on until the pedestrian pressed the button
	{
	carTrafficState = CAR_GREEN_STATE;	//Flag to know which color state in Car Traffic light 
	/*Turning Green led on for 5 second by making 100ms delay 50 times using for loop to check the mode continuously*/
	LED_u8TurnOn(&LED_GREEN_CARS);
	for (u8 i=0 ; i<50 ; i++)
 282:	cf 5f       	subi	r28, 0xFF	; 255
 284:	c2 33       	cpi	r28, 0x32	; 50
 286:	08 f4       	brcc	.+2      	; 0x28a <APP_voidStart+0xb0>
 288:	b4 cf       	rjmp	.-152    	; 0x1f2 <APP_voidStart+0x18>
			pedestrianMode();
			pedestrianDone = 1;
			break;
		}
	}
	if (pedestrianDone)
 28a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 28e:	88 23       	and	r24, r24
 290:	19 f0       	breq	.+6      	; 0x298 <APP_voidStart+0xbe>
	{
		pedestrianDone=0;
 292:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
		continue;
 296:	e6 c0       	rjmp	.+460    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	}
	longPress = 0;
 298:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <longPress>
 29c:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <longPress+0x1>
 2a0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <longPress+0x2>
 2a4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <longPress+0x3>
	
	LED_u8TurnOff(&LED_GREEN_CARS);
 2a8:	84 e7       	ldi	r24, 0x74	; 116
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
	
	/*Blinking Yellow led on for 5 second by making delay 1 second with 20ms delay 50 times using for loop  for 5 times to check the mode continuously*/
	carTrafficState = CAR_YELLOW_STATE;
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <carTrafficState>
	for (u8 i=0 ; i<5 ; i++)
 2b6:	d0 e0       	ldi	r29, 0x00	; 0
 2b8:	57 c0       	rjmp	.+174    	; 0x368 <APP_voidStart+0x18e>
	{
		LED_voidToggle(&LED_YELLOW_CARS);
 2ba:	81 e7       	ldi	r24, 0x71	; 113
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LED_voidToggle>
		for(u8 i=0 ; i< 50; i++)
 2c2:	c0 e0       	ldi	r28, 0x00	; 0
 2c4:	49 c0       	rjmp	.+146    	; 0x358 <APP_voidStart+0x17e>
		{
			TIMER_voidTimer0Delay(20);
 2c6:	64 e1       	ldi	r22, 0x14	; 20
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 66 04 	call	0x8cc	; 0x8cc <TIMER_voidTimer0Delay>
			SW_u8GetState(&PedestrianSwitch,&ReadingState);
 2d2:	63 e8       	ldi	r22, 0x83	; 131
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	81 e6       	ldi	r24, 0x61	; 97
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 9f 02 	call	0x53e	; 0x53e <SW_u8GetState>
			/*Check for the press duration */
			while(ReadingState == SW_u8PRESSED)
 2de:	19 c0       	rjmp	.+50     	; 0x312 <APP_voidStart+0x138>
			{
				SW_u8GetState(&PedestrianSwitch,&ReadingState);
 2e0:	63 e8       	ldi	r22, 0x83	; 131
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	81 e6       	ldi	r24, 0x61	; 97
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 9f 02 	call	0x53e	; 0x53e <SW_u8GetState>
				longPress++;
 2ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <longPress>
 2f0:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <longPress+0x1>
 2f4:	a0 91 7b 00 	lds	r26, 0x007B	; 0x80007b <longPress+0x2>
 2f8:	b0 91 7c 00 	lds	r27, 0x007C	; 0x80007c <longPress+0x3>
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	a1 1d       	adc	r26, r1
 300:	b1 1d       	adc	r27, r1
 302:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <longPress>
 306:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <longPress+0x1>
 30a:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <longPress+0x2>
 30e:	b0 93 7c 00 	sts	0x007C, r27	; 0x80007c <longPress+0x3>
		for(u8 i=0 ; i< 50; i++)
		{
			TIMER_voidTimer0Delay(20);
			SW_u8GetState(&PedestrianSwitch,&ReadingState);
			/*Check for the press duration */
			while(ReadingState == SW_u8PRESSED)
 312:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <ReadingState>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	19 f3       	breq	.-58     	; 0x2e0 <APP_voidStart+0x106>
			{
				SW_u8GetState(&PedestrianSwitch,&ReadingState);
				longPress++;
			}
			if (longPress > MAX_PRESSED_DURATION)
 31a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <longPress>
 31e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <longPress+0x1>
 322:	a0 91 7b 00 	lds	r26, 0x007B	; 0x80007b <longPress+0x2>
 326:	b0 91 7c 00 	lds	r27, 0x007C	; 0x80007c <longPress+0x3>
 32a:	81 3d       	cpi	r24, 0xD1	; 209
 32c:	97 40       	sbci	r25, 0x07	; 7
 32e:	a1 05       	cpc	r26, r1
 330:	b1 05       	cpc	r27, r1
 332:	18 f0       	brcs	.+6      	; 0x33a <APP_voidStart+0x160>
			{
				mode = NORMAL_MODE;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			/*Applying the Pedestrian mode for the short press*/
			if(mode == PEDESTRIAN_MODE)
 33a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 33e:	82 30       	cpi	r24, 0x02	; 2
 340:	51 f4       	brne	.+20     	; 0x356 <APP_voidStart+0x17c>
			{
				LED_u8TurnOff(&LED_RED_PEDESTRIAN);
 342:	85 e6       	ldi	r24, 0x65	; 101
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
				pedestrianMode();
 34a:	0e 94 5a 00 	call	0xb4	; 0xb4 <pedestrianMode>
				pedestrianDone = 1;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
				break;
 354:	04 c0       	rjmp	.+8      	; 0x35e <APP_voidStart+0x184>
	/*Blinking Yellow led on for 5 second by making delay 1 second with 20ms delay 50 times using for loop  for 5 times to check the mode continuously*/
	carTrafficState = CAR_YELLOW_STATE;
	for (u8 i=0 ; i<5 ; i++)
	{
		LED_voidToggle(&LED_YELLOW_CARS);
		for(u8 i=0 ; i< 50; i++)
 356:	cf 5f       	subi	r28, 0xFF	; 255
 358:	c2 33       	cpi	r28, 0x32	; 50
 35a:	08 f4       	brcc	.+2      	; 0x35e <APP_voidStart+0x184>
 35c:	b4 cf       	rjmp	.-152    	; 0x2c6 <APP_voidStart+0xec>
				pedestrianMode();
				pedestrianDone = 1;
				break;
			}
		}
		if (pedestrianDone)
 35e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 362:	81 11       	cpse	r24, r1
 364:	04 c0       	rjmp	.+8      	; 0x36e <APP_voidStart+0x194>
	
	LED_u8TurnOff(&LED_GREEN_CARS);
	
	/*Blinking Yellow led on for 5 second by making delay 1 second with 20ms delay 50 times using for loop  for 5 times to check the mode continuously*/
	carTrafficState = CAR_YELLOW_STATE;
	for (u8 i=0 ; i<5 ; i++)
 366:	df 5f       	subi	r29, 0xFF	; 255
 368:	d5 30       	cpi	r29, 0x05	; 5
 36a:	08 f4       	brcc	.+2      	; 0x36e <APP_voidStart+0x194>
 36c:	a6 cf       	rjmp	.-180    	; 0x2ba <APP_voidStart+0xe0>
		if (pedestrianDone)
		{
			break;
		}
	}
	if (pedestrianDone)
 36e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 372:	88 23       	and	r24, r24
 374:	19 f0       	breq	.+6      	; 0x37c <APP_voidStart+0x1a2>
	{
		pedestrianDone=0;
 376:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
		continue;
 37a:	74 c0       	rjmp	.+232    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	}
	LED_u8TurnOff(&LED_YELLOW_CARS);
 37c:	81 e7       	ldi	r24, 0x71	; 113
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
	longPress = 0;
 384:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <longPress>
 388:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <longPress+0x1>
 38c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <longPress+0x2>
 390:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <longPress+0x3>

/*Turning Red led on for 5 second by making 100ms delay 50 times using for loop to check the mode continuously*/
	carTrafficState = CAR_RED_STATE;
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <carTrafficState>
	LED_u8TurnOn(&LED_RED_CARS);
 39a:	8e e6       	ldi	r24, 0x6E	; 110
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8TurnOn>
	for (u8 i=0 ; i<50 ; i++)
 3a2:	c0 e0       	ldi	r28, 0x00	; 0
 3a4:	49 c0       	rjmp	.+146    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
	{
		TIMER_voidTimer0Delay(100);
 3a6:	64 e6       	ldi	r22, 0x64	; 100
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 66 04 	call	0x8cc	; 0x8cc <TIMER_voidTimer0Delay>
		SW_u8GetState(&PedestrianSwitch,&ReadingState);
 3b2:	63 e8       	ldi	r22, 0x83	; 131
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	81 e6       	ldi	r24, 0x61	; 97
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 9f 02 	call	0x53e	; 0x53e <SW_u8GetState>
		/*Check for the press duration */
		while(ReadingState == SW_u8PRESSED)
 3be:	19 c0       	rjmp	.+50     	; 0x3f2 <APP_voidStart+0x218>
		{
			SW_u8GetState(&PedestrianSwitch,&ReadingState);
 3c0:	63 e8       	ldi	r22, 0x83	; 131
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	81 e6       	ldi	r24, 0x61	; 97
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 9f 02 	call	0x53e	; 0x53e <SW_u8GetState>
			longPress++;
 3cc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <longPress>
 3d0:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <longPress+0x1>
 3d4:	a0 91 7b 00 	lds	r26, 0x007B	; 0x80007b <longPress+0x2>
 3d8:	b0 91 7c 00 	lds	r27, 0x007C	; 0x80007c <longPress+0x3>
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	a1 1d       	adc	r26, r1
 3e0:	b1 1d       	adc	r27, r1
 3e2:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <longPress>
 3e6:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <longPress+0x1>
 3ea:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <longPress+0x2>
 3ee:	b0 93 7c 00 	sts	0x007C, r27	; 0x80007c <longPress+0x3>
	for (u8 i=0 ; i<50 ; i++)
	{
		TIMER_voidTimer0Delay(100);
		SW_u8GetState(&PedestrianSwitch,&ReadingState);
		/*Check for the press duration */
		while(ReadingState == SW_u8PRESSED)
 3f2:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <ReadingState>
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	19 f3       	breq	.-58     	; 0x3c0 <APP_voidStart+0x1e6>
		{
			SW_u8GetState(&PedestrianSwitch,&ReadingState);
			longPress++;
		}
		if (longPress > MAX_PRESSED_DURATION)
 3fa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <longPress>
 3fe:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <longPress+0x1>
 402:	a0 91 7b 00 	lds	r26, 0x007B	; 0x80007b <longPress+0x2>
 406:	b0 91 7c 00 	lds	r27, 0x007C	; 0x80007c <longPress+0x3>
 40a:	81 3d       	cpi	r24, 0xD1	; 209
 40c:	97 40       	sbci	r25, 0x07	; 7
 40e:	a1 05       	cpc	r26, r1
 410:	b1 05       	cpc	r27, r1
 412:	18 f0       	brcs	.+6      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		{
			mode = NORMAL_MODE;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		/*Applying the Pedestrian mode for the short press*/
		if(mode == PEDESTRIAN_MODE)
 41a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 41e:	82 30       	cpi	r24, 0x02	; 2
 420:	51 f4       	brne	.+20     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		{
			LED_u8TurnOff(&LED_RED_PEDESTRIAN);
 422:	85 e6       	ldi	r24, 0x65	; 101
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
			pedestrianMode();
 42a:	0e 94 5a 00 	call	0xb4	; 0xb4 <pedestrianMode>
			pedestrianDone = 1;
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
			break;
 434:	04 c0       	rjmp	.+8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
	longPress = 0;

/*Turning Red led on for 5 second by making 100ms delay 50 times using for loop to check the mode continuously*/
	carTrafficState = CAR_RED_STATE;
	LED_u8TurnOn(&LED_RED_CARS);
	for (u8 i=0 ; i<50 ; i++)
 436:	cf 5f       	subi	r28, 0xFF	; 255
 438:	c2 33       	cpi	r28, 0x32	; 50
 43a:	08 f4       	brcc	.+2      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43c:	b4 cf       	rjmp	.-152    	; 0x3a6 <APP_voidStart+0x1cc>
			pedestrianMode();
			pedestrianDone = 1;
			break;
		}
	}
	if (pedestrianDone)
 43e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 442:	88 23       	and	r24, r24
 444:	19 f0       	breq	.+6      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
	{
		pedestrianDone=0;
 446:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
		continue;
 44a:	0c c0       	rjmp	.+24     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	}
	LED_u8TurnOff(&LED_RED_CARS);
 44c:	8e e6       	ldi	r24, 0x6E	; 110
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
	longPress = 0;
 454:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <longPress>
 458:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <longPress+0x1>
 45c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <longPress+0x2>
 460:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <longPress+0x3>
	
}

void APP_voidStart(void)
{
	while(mode == NORMAL_MODE)			//Normal mode will be on until the pedestrian pressed the button
 464:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 468:	81 30       	cpi	r24, 0x01	; 1
 46a:	09 f4       	brne	.+2      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46c:	b9 ce       	rjmp	.-654    	; 0x1e0 <APP_voidStart+0x6>
		continue;
	}
	LED_u8TurnOff(&LED_RED_CARS);
	longPress = 0;
	}
}
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <LED_u8TurnOn>:

#include "LED_interface.h"


u8 LED_u8TurnOn(LED_t* Copy_u8LED)
{
 474:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = 0;

	switch(Copy_u8LED->ConnectionType)
 476:	82 81       	ldd	r24, Z+2	; 0x02
 478:	88 23       	and	r24, r24
 47a:	19 f0       	breq	.+6      	; 0x482 <LED_u8TurnOn+0xe>
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	41 f0       	breq	.+16     	; 0x490 <LED_u8TurnOn+0x1c>
 480:	0e c0       	rjmp	.+28     	; 0x49e <LED_u8TurnOn+0x2a>
	{
	case LED_u8SINK:
		DIO_u8SetPinValue(Copy_u8LED->Port,Copy_u8LED->Pin,DIO_u8PIN_LOW);
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	61 81       	ldd	r22, Z+1	; 0x01
 486:	80 81       	ld	r24, Z
 488:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_u8SetPinValue>
#include "LED_interface.h"


u8 LED_u8TurnOn(LED_t* Copy_u8LED)
{
	u8 Local_u8ErrorState = 0;
 48c:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8LED->ConnectionType)
	{
	case LED_u8SINK:
		DIO_u8SetPinValue(Copy_u8LED->Port,Copy_u8LED->Pin,DIO_u8PIN_LOW);
		break;
 48e:	08 95       	ret
	case LED_u8SOURCE:
		DIO_u8SetPinValue(Copy_u8LED->Port,Copy_u8LED->Pin,DIO_u8PIN_HIGH);
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	61 81       	ldd	r22, Z+1	; 0x01
 494:	80 81       	ld	r24, Z
 496:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_u8SetPinValue>
#include "LED_interface.h"


u8 LED_u8TurnOn(LED_t* Copy_u8LED)
{
	u8 Local_u8ErrorState = 0;
 49a:	80 e0       	ldi	r24, 0x00	; 0
	case LED_u8SINK:
		DIO_u8SetPinValue(Copy_u8LED->Port,Copy_u8LED->Pin,DIO_u8PIN_LOW);
		break;
	case LED_u8SOURCE:
		DIO_u8SetPinValue(Copy_u8LED->Port,Copy_u8LED->Pin,DIO_u8PIN_HIGH);
		break;
 49c:	08 95       	ret
	default: Local_u8ErrorState =1;break;
 49e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return Local_u8ErrorState;
}
 4a0:	08 95       	ret

000004a2 <LED_u8TurnOff>:

u8 LED_u8TurnOff(LED_t* Copy_u8LED)
{
 4a2:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = 0;

	switch(Copy_u8LED->ConnectionType)
 4a4:	82 81       	ldd	r24, Z+2	; 0x02
 4a6:	88 23       	and	r24, r24
 4a8:	19 f0       	breq	.+6      	; 0x4b0 <LED_u8TurnOff+0xe>
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	41 f0       	breq	.+16     	; 0x4be <LED_u8TurnOff+0x1c>
 4ae:	0e c0       	rjmp	.+28     	; 0x4cc <LED_u8TurnOff+0x2a>
	{
	case LED_u8SINK:
		DIO_u8SetPinValue(Copy_u8LED->Port,Copy_u8LED->Pin,DIO_u8PIN_HIGH);
 4b0:	41 e0       	ldi	r20, 0x01	; 1
 4b2:	61 81       	ldd	r22, Z+1	; 0x01
 4b4:	80 81       	ld	r24, Z
 4b6:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_u8SetPinValue>
	return Local_u8ErrorState;
}

u8 LED_u8TurnOff(LED_t* Copy_u8LED)
{
	u8 Local_u8ErrorState = 0;
 4ba:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8LED->ConnectionType)
	{
	case LED_u8SINK:
		DIO_u8SetPinValue(Copy_u8LED->Port,Copy_u8LED->Pin,DIO_u8PIN_HIGH);
		break;
 4bc:	08 95       	ret
	case LED_u8SOURCE:
		DIO_u8SetPinValue(Copy_u8LED->Port,Copy_u8LED->Pin,DIO_u8PIN_LOW);
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	61 81       	ldd	r22, Z+1	; 0x01
 4c2:	80 81       	ld	r24, Z
 4c4:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_u8SetPinValue>
	return Local_u8ErrorState;
}

u8 LED_u8TurnOff(LED_t* Copy_u8LED)
{
	u8 Local_u8ErrorState = 0;
 4c8:	80 e0       	ldi	r24, 0x00	; 0
	case LED_u8SINK:
		DIO_u8SetPinValue(Copy_u8LED->Port,Copy_u8LED->Pin,DIO_u8PIN_HIGH);
		break;
	case LED_u8SOURCE:
		DIO_u8SetPinValue(Copy_u8LED->Port,Copy_u8LED->Pin,DIO_u8PIN_LOW);
		break;
 4ca:	08 95       	ret
	default: Local_u8ErrorState =1;break;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
	}

	return Local_u8ErrorState;
}
 4ce:	08 95       	ret

000004d0 <LED_voidToggle>:

void LED_voidToggle(LED_t* Copy_u8LED)
{
 4d0:	0f 93       	push	r16
 4d2:	1f 93       	push	r17
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	1f 92       	push	r1
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
 4de:	8c 01       	movw	r16, r24
	u8 Local_u8PinState;
	DIO_u8GetPinValue(Copy_u8LED->Port,Copy_u8LED->Pin,&Local_u8PinState);
 4e0:	ae 01       	movw	r20, r28
 4e2:	4f 5f       	subi	r20, 0xFF	; 255
 4e4:	5f 4f       	sbci	r21, 0xFF	; 255
 4e6:	fc 01       	movw	r30, r24
 4e8:	61 81       	ldd	r22, Z+1	; 0x01
 4ea:	80 81       	ld	r24, Z
 4ec:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <DIO_u8GetPinValue>
	
	switch(Copy_u8LED->ConnectionType)
 4f0:	f8 01       	movw	r30, r16
 4f2:	82 81       	ldd	r24, Z+2	; 0x02
 4f4:	88 23       	and	r24, r24
 4f6:	81 f0       	breq	.+32     	; 0x518 <LED_voidToggle+0x48>
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	d9 f4       	brne	.+54     	; 0x532 <LED_voidToggle+0x62>
	{
		case LED_u8SOURCE:
			switch(Local_u8PinState)
 4fc:	89 81       	ldd	r24, Y+1	; 0x01
 4fe:	88 23       	and	r24, r24
 500:	19 f0       	breq	.+6      	; 0x508 <LED_voidToggle+0x38>
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	29 f0       	breq	.+10     	; 0x510 <LED_voidToggle+0x40>
 506:	15 c0       	rjmp	.+42     	; 0x532 <LED_voidToggle+0x62>
			{
				case 0: LED_u8TurnOn(Copy_u8LED); break;
 508:	c8 01       	movw	r24, r16
 50a:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8TurnOn>
 50e:	11 c0       	rjmp	.+34     	; 0x532 <LED_voidToggle+0x62>
				case 1: LED_u8TurnOff(Copy_u8LED); break;
 510:	c8 01       	movw	r24, r16
 512:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
 516:	0d c0       	rjmp	.+26     	; 0x532 <LED_voidToggle+0x62>
			}
			break;
		case LED_u8SINK:
			switch(Local_u8PinState)
 518:	89 81       	ldd	r24, Y+1	; 0x01
 51a:	88 23       	and	r24, r24
 51c:	19 f0       	breq	.+6      	; 0x524 <LED_voidToggle+0x54>
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	29 f0       	breq	.+10     	; 0x52c <LED_voidToggle+0x5c>
 522:	07 c0       	rjmp	.+14     	; 0x532 <LED_voidToggle+0x62>
			{
				case 0: LED_u8TurnOff(Copy_u8LED); break;
 524:	c8 01       	movw	r24, r16
 526:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_u8TurnOff>
 52a:	03 c0       	rjmp	.+6      	; 0x532 <LED_voidToggle+0x62>
				case 1: LED_u8TurnOn(Copy_u8LED); break;
 52c:	c8 01       	movw	r24, r16
 52e:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8TurnOn>
			}
			break;
	}
 532:	0f 90       	pop	r0
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	1f 91       	pop	r17
 53a:	0f 91       	pop	r16
 53c:	08 95       	ret

0000053e <SW_u8GetState>:




u8 SW_u8GetState(SW_t* Copy_u8Switch,u8* Copy_u8PressingState)
{
 53e:	ef 92       	push	r14
 540:	ff 92       	push	r15
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	1f 92       	push	r1
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
 550:	8c 01       	movw	r16, r24
 552:	7b 01       	movw	r14, r22
	u8 Local_u8ErrorState = 0;
	u8 Local_u8ReadingState;

	DIO_u8GetPinValue(Copy_u8Switch->Port,Copy_u8Switch->Pin,&Local_u8ReadingState);
 554:	ae 01       	movw	r20, r28
 556:	4f 5f       	subi	r20, 0xFF	; 255
 558:	5f 4f       	sbci	r21, 0xFF	; 255
 55a:	fc 01       	movw	r30, r24
 55c:	61 81       	ldd	r22, Z+1	; 0x01
 55e:	80 81       	ld	r24, Z
 560:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <DIO_u8GetPinValue>

	if (Copy_u8Switch->PullType == SW_u8PULL_UP)
 564:	f8 01       	movw	r30, r16
 566:	83 81       	ldd	r24, Z+3	; 0x03
 568:	81 30       	cpi	r24, 0x01	; 1
 56a:	a1 f4       	brne	.+40     	; 0x594 <SW_u8GetState+0x56>
	{
		if (Local_u8ReadingState == DIO_u8PIN_HIGH)
 56c:	89 81       	ldd	r24, Y+1	; 0x01
 56e:	81 30       	cpi	r24, 0x01	; 1
 570:	21 f4       	brne	.+8      	; 0x57a <SW_u8GetState+0x3c>
		{
			*Copy_u8PressingState = SW_u8NOT_PRESSED;
 572:	f7 01       	movw	r30, r14
 574:	10 82       	st	Z, r1



u8 SW_u8GetState(SW_t* Copy_u8Switch,u8* Copy_u8PressingState)
{
	u8 Local_u8ErrorState = 0;
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	2e c0       	rjmp	.+92     	; 0x5d6 <SW_u8GetState+0x98>
	{
		if (Local_u8ReadingState == DIO_u8PIN_HIGH)
		{
			*Copy_u8PressingState = SW_u8NOT_PRESSED;
		}
		else if (Local_u8ReadingState == DIO_u8PIN_LOW)
 57a:	81 11       	cpse	r24, r1
 57c:	1f c0       	rjmp	.+62     	; 0x5bc <SW_u8GetState+0x7e>
		{
			*Copy_u8PressingState = SW_u8PRESSED;
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	f7 01       	movw	r30, r14
 582:	80 83       	st	Z, r24
			if (Copy_u8Switch->SelfLockingType == SW_u8MOMENTARY)
 584:	f8 01       	movw	r30, r16
 586:	82 81       	ldd	r24, Z+2	; 0x02
 588:	88 23       	and	r24, r24
 58a:	d1 f0       	breq	.+52     	; 0x5c0 <SW_u8GetState+0x82>
			{
				//_delay_ms(100);
			}
			else if (Copy_u8Switch->SelfLockingType == SW_u8MAINTAINED)
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	d1 f4       	brne	.+52     	; 0x5c4 <SW_u8GetState+0x86>



u8 SW_u8GetState(SW_t* Copy_u8Switch,u8* Copy_u8PressingState)
{
	u8 Local_u8ErrorState = 0;
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	21 c0       	rjmp	.+66     	; 0x5d6 <SW_u8GetState+0x98>
			{
				Local_u8ErrorState = 1;
			}
		}
	}
	else if (Copy_u8Switch->PullType == SW_u8PULL_DOWN)
 594:	81 11       	cpse	r24, r1
 596:	18 c0       	rjmp	.+48     	; 0x5c8 <SW_u8GetState+0x8a>
	{
		if (Local_u8ReadingState == DIO_u8PIN_HIGH)
 598:	89 81       	ldd	r24, Y+1	; 0x01
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	51 f4       	brne	.+20     	; 0x5b2 <SW_u8GetState+0x74>
		{
			*Copy_u8PressingState = SW_u8PRESSED;
 59e:	f7 01       	movw	r30, r14
 5a0:	80 83       	st	Z, r24
			if (Copy_u8Switch->SelfLockingType == SW_u8MOMENTARY)
 5a2:	f8 01       	movw	r30, r16
 5a4:	82 81       	ldd	r24, Z+2	; 0x02
 5a6:	88 23       	and	r24, r24
 5a8:	89 f0       	breq	.+34     	; 0x5cc <SW_u8GetState+0x8e>
			{
				//_delay_ms(100);
			}
			else if (Copy_u8Switch->SelfLockingType == SW_u8MAINTAINED)
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	89 f4       	brne	.+34     	; 0x5d0 <SW_u8GetState+0x92>



u8 SW_u8GetState(SW_t* Copy_u8Switch,u8* Copy_u8PressingState)
{
	u8 Local_u8ErrorState = 0;
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	12 c0       	rjmp	.+36     	; 0x5d6 <SW_u8GetState+0x98>
			else
			{
				Local_u8ErrorState = 1;
			}
		}
		else if (Local_u8ReadingState == DIO_u8PIN_LOW)
 5b2:	81 11       	cpse	r24, r1
 5b4:	0f c0       	rjmp	.+30     	; 0x5d4 <SW_u8GetState+0x96>
		{
			*Copy_u8PressingState = SW_u8NOT_PRESSED;
 5b6:	f7 01       	movw	r30, r14
 5b8:	10 82       	st	Z, r1
 5ba:	0d c0       	rjmp	.+26     	; 0x5d6 <SW_u8GetState+0x98>



u8 SW_u8GetState(SW_t* Copy_u8Switch,u8* Copy_u8PressingState)
{
	u8 Local_u8ErrorState = 0;
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	0b c0       	rjmp	.+22     	; 0x5d6 <SW_u8GetState+0x98>
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	09 c0       	rjmp	.+18     	; 0x5d6 <SW_u8GetState+0x98>
			{
				/*DO NOTHING*/
			}
			else
			{
				Local_u8ErrorState = 1;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	07 c0       	rjmp	.+14     	; 0x5d6 <SW_u8GetState+0x98>
			*Copy_u8PressingState = SW_u8NOT_PRESSED;
		}
	}
	else
	{
		Local_u8ErrorState = 1;
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <SW_u8GetState+0x98>



u8 SW_u8GetState(SW_t* Copy_u8Switch,u8* Copy_u8PressingState)
{
	u8 Local_u8ErrorState = 0;
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <SW_u8GetState+0x98>
			{
				/*DO NOTHING*/
			}
			else
			{
				Local_u8ErrorState = 1;
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <SW_u8GetState+0x98>



u8 SW_u8GetState(SW_t* Copy_u8Switch,u8* Copy_u8PressingState)
{
	u8 Local_u8ErrorState = 0;
 5d4:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorState = 1;
	}

	return Local_u8ErrorState;
}
 5d6:	0f 90       	pop	r0
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	1f 91       	pop	r17
 5de:	0f 91       	pop	r16
 5e0:	ff 90       	pop	r15
 5e2:	ef 90       	pop	r14
 5e4:	08 95       	ret

000005e6 <main>:

int main(void)
{
	//TEST_voidModule();		//Module for testing the drivers
	
	APP_voidInit();				//Initialization of App	drivers and Components
 5e6:	0e 94 4d 00 	call	0x9a	; 0x9a <APP_voidInit>
    while (1) 
    {
	APP_voidStart();			//Starting our Project
 5ea:	0e 94 ed 00 	call	0x1da	; 0x1da <APP_voidStart>
 5ee:	fd cf       	rjmp	.-6      	; 0x5ea <main+0x4>

000005f0 <DIO_u8SetPinValue>:
	case DIO_u8PORTC:PORTC = Copy_u8Value;break;
	case DIO_u8PORTD:PORTD = Copy_u8Value;break;
	default:Local_u8ErrorState=1;break;
	}
	return Local_u8ErrorState;
}
 5f0:	68 30       	cpi	r22, 0x08	; 8
 5f2:	08 f0       	brcs	.+2      	; 0x5f6 <DIO_u8SetPinValue+0x6>
 5f4:	78 c0       	rjmp	.+240    	; 0x6e6 <DIO_u8SetPinValue+0xf6>
 5f6:	41 30       	cpi	r20, 0x01	; 1
 5f8:	c1 f5       	brne	.+112    	; 0x66a <DIO_u8SetPinValue+0x7a>
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	91 f0       	breq	.+36     	; 0x622 <DIO_u8SetPinValue+0x32>
 5fe:	28 f0       	brcs	.+10     	; 0x60a <DIO_u8SetPinValue+0x1a>
 600:	82 30       	cpi	r24, 0x02	; 2
 602:	d9 f0       	breq	.+54     	; 0x63a <DIO_u8SetPinValue+0x4a>
 604:	83 30       	cpi	r24, 0x03	; 3
 606:	29 f1       	breq	.+74     	; 0x652 <DIO_u8SetPinValue+0x62>
 608:	70 c0       	rjmp	.+224    	; 0x6ea <DIO_u8SetPinValue+0xfa>
 60a:	2b b3       	in	r18, 0x1b	; 27
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_u8SetPinValue+0x26>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	6a 95       	dec	r22
 618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_u8SetPinValue+0x22>
 61a:	82 2b       	or	r24, r18
 61c:	8b bb       	out	0x1b, r24	; 27
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	08 95       	ret
 622:	28 b3       	in	r18, 0x18	; 24
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_u8SetPinValue+0x3e>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	6a 95       	dec	r22
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_u8SetPinValue+0x3a>
 632:	82 2b       	or	r24, r18
 634:	88 bb       	out	0x18, r24	; 24
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	08 95       	ret
 63a:	25 b3       	in	r18, 0x15	; 21
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_u8SetPinValue+0x56>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_u8SetPinValue+0x52>
 64a:	82 2b       	or	r24, r18
 64c:	85 bb       	out	0x15, r24	; 21
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	08 95       	ret
 652:	22 b3       	in	r18, 0x12	; 18
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_u8SetPinValue+0x6e>
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_u8SetPinValue+0x6a>
 662:	82 2b       	or	r24, r18
 664:	82 bb       	out	0x12, r24	; 18
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	08 95       	ret
 66a:	41 11       	cpse	r20, r1
 66c:	40 c0       	rjmp	.+128    	; 0x6ee <DIO_u8SetPinValue+0xfe>
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	99 f0       	breq	.+38     	; 0x698 <DIO_u8SetPinValue+0xa8>
 672:	28 f0       	brcs	.+10     	; 0x67e <DIO_u8SetPinValue+0x8e>
 674:	82 30       	cpi	r24, 0x02	; 2
 676:	e9 f0       	breq	.+58     	; 0x6b2 <DIO_u8SetPinValue+0xc2>
 678:	83 30       	cpi	r24, 0x03	; 3
 67a:	41 f1       	breq	.+80     	; 0x6cc <DIO_u8SetPinValue+0xdc>
 67c:	3a c0       	rjmp	.+116    	; 0x6f2 <DIO_u8SetPinValue+0x102>
 67e:	2b b3       	in	r18, 0x1b	; 27
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_u8SetPinValue+0x9a>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	6a 95       	dec	r22
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_u8SetPinValue+0x96>
 68e:	80 95       	com	r24
 690:	82 23       	and	r24, r18
 692:	8b bb       	out	0x1b, r24	; 27
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	08 95       	ret
 698:	28 b3       	in	r18, 0x18	; 24
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_u8SetPinValue+0xb4>
 6a0:	88 0f       	add	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	6a 95       	dec	r22
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_u8SetPinValue+0xb0>
 6a8:	80 95       	com	r24
 6aa:	82 23       	and	r24, r18
 6ac:	88 bb       	out	0x18, r24	; 24
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	08 95       	ret
 6b2:	25 b3       	in	r18, 0x15	; 21
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_u8SetPinValue+0xce>
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	6a 95       	dec	r22
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_u8SetPinValue+0xca>
 6c2:	80 95       	com	r24
 6c4:	82 23       	and	r24, r18
 6c6:	85 bb       	out	0x15, r24	; 21
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	08 95       	ret
 6cc:	22 b3       	in	r18, 0x12	; 18
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <DIO_u8SetPinValue+0xe8>
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	6a 95       	dec	r22
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <DIO_u8SetPinValue+0xe4>
 6dc:	80 95       	com	r24
 6de:	82 23       	and	r24, r18
 6e0:	82 bb       	out	0x12, r24	; 18
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	08 95       	ret
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	08 95       	ret
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	08 95       	ret
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	08 95       	ret
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	08 95       	ret

000006f6 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
	u8 Local_u8ErrorState =0;
	if ((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7))
 6f6:	41 15       	cp	r20, r1
 6f8:	51 05       	cpc	r21, r1
 6fa:	d1 f1       	breq	.+116    	; 0x770 <DIO_u8GetPinValue+0x7a>
 6fc:	68 30       	cpi	r22, 0x08	; 8
 6fe:	d0 f5       	brcc	.+116    	; 0x774 <DIO_u8GetPinValue+0x7e>
	{
		switch(Copy_u8Port)
 700:	81 30       	cpi	r24, 0x01	; 1
 702:	91 f0       	breq	.+36     	; 0x728 <DIO_u8GetPinValue+0x32>
 704:	28 f0       	brcs	.+10     	; 0x710 <DIO_u8GetPinValue+0x1a>
 706:	82 30       	cpi	r24, 0x02	; 2
 708:	d9 f0       	breq	.+54     	; 0x740 <DIO_u8GetPinValue+0x4a>
 70a:	83 30       	cpi	r24, 0x03	; 3
 70c:	29 f1       	breq	.+74     	; 0x758 <DIO_u8GetPinValue+0x62>
 70e:	34 c0       	rjmp	.+104    	; 0x778 <DIO_u8GetPinValue+0x82>
		{
		case DIO_u8PORTA:*Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);break;
 710:	89 b3       	in	r24, 0x19	; 25
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_u8GetPinValue+0x24>
 716:	95 95       	asr	r25
 718:	87 95       	ror	r24
 71a:	6a 95       	dec	r22
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_u8GetPinValue+0x20>
 71e:	81 70       	andi	r24, 0x01	; 1
 720:	fa 01       	movw	r30, r20
 722:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
	u8 Local_u8ErrorState =0;
 724:	80 e0       	ldi	r24, 0x00	; 0
	if ((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7))
	{
		switch(Copy_u8Port)
		{
		case DIO_u8PORTA:*Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);break;
 726:	08 95       	ret
		case DIO_u8PORTB:*Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);break;
 728:	86 b3       	in	r24, 0x16	; 22
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	02 c0       	rjmp	.+4      	; 0x732 <DIO_u8GetPinValue+0x3c>
 72e:	95 95       	asr	r25
 730:	87 95       	ror	r24
 732:	6a 95       	dec	r22
 734:	e2 f7       	brpl	.-8      	; 0x72e <DIO_u8GetPinValue+0x38>
 736:	81 70       	andi	r24, 0x01	; 1
 738:	fa 01       	movw	r30, r20
 73a:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
	u8 Local_u8ErrorState =0;
 73c:	80 e0       	ldi	r24, 0x00	; 0
	if ((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7))
	{
		switch(Copy_u8Port)
		{
		case DIO_u8PORTA:*Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);break;
		case DIO_u8PORTB:*Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);break;
 73e:	08 95       	ret
		case DIO_u8PORTC:*Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);break;
 740:	83 b3       	in	r24, 0x13	; 19
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_u8GetPinValue+0x54>
 746:	95 95       	asr	r25
 748:	87 95       	ror	r24
 74a:	6a 95       	dec	r22
 74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_u8GetPinValue+0x50>
 74e:	81 70       	andi	r24, 0x01	; 1
 750:	fa 01       	movw	r30, r20
 752:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
	u8 Local_u8ErrorState =0;
 754:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(Copy_u8Port)
		{
		case DIO_u8PORTA:*Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);break;
		case DIO_u8PORTB:*Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);break;
		case DIO_u8PORTC:*Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);break;
 756:	08 95       	ret
		case DIO_u8PORTD:*Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);break;
 758:	80 b3       	in	r24, 0x10	; 16
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_u8GetPinValue+0x6c>
 75e:	95 95       	asr	r25
 760:	87 95       	ror	r24
 762:	6a 95       	dec	r22
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_u8GetPinValue+0x68>
 766:	81 70       	andi	r24, 0x01	; 1
 768:	fa 01       	movw	r30, r20
 76a:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
	u8 Local_u8ErrorState =0;
 76c:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8Port)
		{
		case DIO_u8PORTA:*Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);break;
		case DIO_u8PORTB:*Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);break;
		case DIO_u8PORTC:*Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);break;
		case DIO_u8PORTD:*Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);break;
 76e:	08 95       	ret
		default:Local_u8ErrorState=1;break;
		}
	}
	else
	{
		Local_u8ErrorState=1;
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	08 95       	ret
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	08 95       	ret
		{
		case DIO_u8PORTA:*Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);break;
		case DIO_u8PORTB:*Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);break;
		case DIO_u8PORTC:*Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);break;
		case DIO_u8PORTD:*Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);break;
		default:Local_u8ErrorState=1;break;
 778:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8ErrorState=1;
	}
	return Local_u8ErrorState;
}
 77a:	08 95       	ret

0000077c <GIE_voidEnable>:

#include "GIE_interface.h"

void GIE_voidEnable(void)
{
	SET_BIT(SREG,SREG_I);
 77c:	8f b7       	in	r24, 0x3f	; 63
 77e:	80 68       	ori	r24, 0x80	; 128
 780:	8f bf       	out	0x3f, r24	; 63
 782:	08 95       	ret

00000784 <EXTI_voidINT0Init>:
	{
		Local_u8ErrorState = NULL_POINTER;
	}

	return Local_u8ErrorState;
}
 784:	85 b7       	in	r24, 0x35	; 53
 786:	82 60       	ori	r24, 0x02	; 2
 788:	85 bf       	out	0x35, r24	; 53
 78a:	85 b7       	in	r24, 0x35	; 53
 78c:	8e 7f       	andi	r24, 0xFE	; 254
 78e:	85 bf       	out	0x35, r24	; 53
 790:	8b b7       	in	r24, 0x3b	; 59
 792:	80 64       	ori	r24, 0x40	; 64
 794:	8b bf       	out	0x3b, r24	; 59
 796:	08 95       	ret

00000798 <EXTI_u8INT0SetCallBack>:
 798:	00 97       	sbiw	r24, 0x00	; 0
 79a:	31 f0       	breq	.+12     	; 0x7a8 <EXTI_u8INT0SetCallBack+0x10>
 79c:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <EXTI_pvINT0_ISR_Func+0x1>
 7a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <EXTI_pvINT0_ISR_Func>
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	08 95       	ret
 7a8:	82 e0       	ldi	r24, 0x02	; 2
 7aa:	08 95       	ret

000007ac <__vector_1>:



void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 7ac:	1f 92       	push	r1
 7ae:	0f 92       	push	r0
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	0f 92       	push	r0
 7b4:	11 24       	eor	r1, r1
 7b6:	2f 93       	push	r18
 7b8:	3f 93       	push	r19
 7ba:	4f 93       	push	r20
 7bc:	5f 93       	push	r21
 7be:	6f 93       	push	r22
 7c0:	7f 93       	push	r23
 7c2:	8f 93       	push	r24
 7c4:	9f 93       	push	r25
 7c6:	af 93       	push	r26
 7c8:	bf 93       	push	r27
 7ca:	ef 93       	push	r30
 7cc:	ff 93       	push	r31
	if(EXTI_pvINT0_ISR_Func != NULL)
 7ce:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <EXTI_pvINT0_ISR_Func>
 7d2:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <EXTI_pvINT0_ISR_Func+0x1>
 7d6:	30 97       	sbiw	r30, 0x00	; 0
 7d8:	09 f0       	breq	.+2      	; 0x7dc <__vector_1+0x30>
	{
		EXTI_pvINT0_ISR_Func();
 7da:	09 95       	icall
	}
	else
	{
		/* Do Nothing */
	}
}
 7dc:	ff 91       	pop	r31
 7de:	ef 91       	pop	r30
 7e0:	bf 91       	pop	r27
 7e2:	af 91       	pop	r26
 7e4:	9f 91       	pop	r25
 7e6:	8f 91       	pop	r24
 7e8:	7f 91       	pop	r23
 7ea:	6f 91       	pop	r22
 7ec:	5f 91       	pop	r21
 7ee:	4f 91       	pop	r20
 7f0:	3f 91       	pop	r19
 7f2:	2f 91       	pop	r18
 7f4:	0f 90       	pop	r0
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	0f 90       	pop	r0
 7fa:	1f 90       	pop	r1
 7fc:	18 95       	reti

000007fe <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
 7fe:	1f 92       	push	r1
 800:	0f 92       	push	r0
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	0f 92       	push	r0
 806:	11 24       	eor	r1, r1
 808:	2f 93       	push	r18
 80a:	3f 93       	push	r19
 80c:	4f 93       	push	r20
 80e:	5f 93       	push	r21
 810:	6f 93       	push	r22
 812:	7f 93       	push	r23
 814:	8f 93       	push	r24
 816:	9f 93       	push	r25
 818:	af 93       	push	r26
 81a:	bf 93       	push	r27
 81c:	ef 93       	push	r30
 81e:	ff 93       	push	r31
	if(EXTI_pvINT1_ISR_Func != NULL)
 820:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <EXTI_pvINT1_ISR_Func>
 824:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <EXTI_pvINT1_ISR_Func+0x1>
 828:	30 97       	sbiw	r30, 0x00	; 0
 82a:	09 f0       	breq	.+2      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
	{
		EXTI_pvINT1_ISR_Func();
 82c:	09 95       	icall
	}
	else
	{
		/* Do Nothing */
	}
}
 82e:	ff 91       	pop	r31
 830:	ef 91       	pop	r30
 832:	bf 91       	pop	r27
 834:	af 91       	pop	r26
 836:	9f 91       	pop	r25
 838:	8f 91       	pop	r24
 83a:	7f 91       	pop	r23
 83c:	6f 91       	pop	r22
 83e:	5f 91       	pop	r21
 840:	4f 91       	pop	r20
 842:	3f 91       	pop	r19
 844:	2f 91       	pop	r18
 846:	0f 90       	pop	r0
 848:	0f be       	out	0x3f, r0	; 63
 84a:	0f 90       	pop	r0
 84c:	1f 90       	pop	r1
 84e:	18 95       	reti

00000850 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
 850:	1f 92       	push	r1
 852:	0f 92       	push	r0
 854:	0f b6       	in	r0, 0x3f	; 63
 856:	0f 92       	push	r0
 858:	11 24       	eor	r1, r1
 85a:	2f 93       	push	r18
 85c:	3f 93       	push	r19
 85e:	4f 93       	push	r20
 860:	5f 93       	push	r21
 862:	6f 93       	push	r22
 864:	7f 93       	push	r23
 866:	8f 93       	push	r24
 868:	9f 93       	push	r25
 86a:	af 93       	push	r26
 86c:	bf 93       	push	r27
 86e:	ef 93       	push	r30
 870:	ff 93       	push	r31
	if(EXTI_pvINT2_ISR_Func != NULL)
 872:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <EXTI_pvINT2_ISR_Func>
 876:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <EXTI_pvINT2_ISR_Func+0x1>
 87a:	30 97       	sbiw	r30, 0x00	; 0
 87c:	09 f0       	breq	.+2      	; 0x880 <__stack+0x21>
	{
		EXTI_pvINT2_ISR_Func();
 87e:	09 95       	icall
	}
	else
	{
		/* Do Nothing */
	}
}
 880:	ff 91       	pop	r31
 882:	ef 91       	pop	r30
 884:	bf 91       	pop	r27
 886:	af 91       	pop	r26
 888:	9f 91       	pop	r25
 88a:	8f 91       	pop	r24
 88c:	7f 91       	pop	r23
 88e:	6f 91       	pop	r22
 890:	5f 91       	pop	r21
 892:	4f 91       	pop	r20
 894:	3f 91       	pop	r19
 896:	2f 91       	pop	r18
 898:	0f 90       	pop	r0
 89a:	0f be       	out	0x3f, r0	; 63
 89c:	0f 90       	pop	r0
 89e:	1f 90       	pop	r1
 8a0:	18 95       	reti

000008a2 <PORT_voidInit>:
#include "PORT_interface.h"


void PORT_voidInit(void)
{
	DDRA = PORTA_DIR;
 8a2:	87 e0       	ldi	r24, 0x07	; 7
 8a4:	8a bb       	out	0x1a, r24	; 26
	DDRB = PORTB_DIR;
 8a6:	87 e8       	ldi	r24, 0x87	; 135
 8a8:	87 bb       	out	0x17, r24	; 23
	DDRC = PORTC_DIR;
 8aa:	81 e8       	ldi	r24, 0x81	; 129
 8ac:	84 bb       	out	0x14, r24	; 20
	DDRD = PORTD_DIR;
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	81 bb       	out	0x11, r24	; 17
	
	PORTA = PORTA_INIT_VALUE;
 8b2:	1b ba       	out	0x1b, r1	; 27
	PORTB = PORTB_INIT_VALUE;
 8b4:	18 ba       	out	0x18, r1	; 24
	PORTC = PORTC_INIT_VALUE;
 8b6:	15 ba       	out	0x15, r1	; 21
	PORTD = PORTD_INIT_VALUE;
 8b8:	84 e0       	ldi	r24, 0x04	; 4
 8ba:	82 bb       	out	0x12, r24	; 18
 8bc:	08 95       	ret

000008be <TIMER_voidTimer0Init>:
#include <math.h>

void TIMER_voidTimer0Init(void)
{
	/*Put Timer0 in Normal mode*/
	CLR_BIT(TCCR0,TCCR0_WGM00);
 8be:	83 b7       	in	r24, 0x33	; 51
 8c0:	8f 7b       	andi	r24, 0xBF	; 191
 8c2:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,TCCR0_WGM01);
 8c4:	83 b7       	in	r24, 0x33	; 51
 8c6:	87 7f       	andi	r24, 0xF7	; 247
 8c8:	83 bf       	out	0x33, r24	; 51
 8ca:	08 95       	ret

000008cc <TIMER_voidTimer0Delay>:
}

void TIMER_voidTimer0Delay(u32 Copy_u32Delayms)
{
 8cc:	8f 92       	push	r8
 8ce:	9f 92       	push	r9
 8d0:	af 92       	push	r10
 8d2:	bf 92       	push	r11
 8d4:	cf 92       	push	r12
 8d6:	df 92       	push	r13
 8d8:	ef 92       	push	r14
 8da:	ff 92       	push	r15
	/*Setting the clock source*/
	//Setting 256 prescaler
	CLR_BIT(TCCR0,TCCR0_CS00);
 8dc:	23 b7       	in	r18, 0x33	; 51
 8de:	2e 7f       	andi	r18, 0xFE	; 254
 8e0:	23 bf       	out	0x33, r18	; 51
	CLR_BIT(TCCR0,TCCR0_CS01);
 8e2:	23 b7       	in	r18, 0x33	; 51
 8e4:	2d 7f       	andi	r18, 0xFD	; 253
 8e6:	23 bf       	out	0x33, r18	; 51
	SET_BIT(TCCR0,TCCR0_CS02);
 8e8:	23 b7       	in	r18, 0x33	; 51
 8ea:	24 60       	ori	r18, 0x04	; 4
 8ec:	23 bf       	out	0x33, r18	; 51
	f64 Local_f64MaxDely = Local_f64TickTime *(1<<8);	//Calculate the max delay we can get with the tick time we have
	u32 Local_u32TimerInitialValue;	// Declaring variable to calculate the initial timer value in each state
	u32 Local_u32NumberOV;	//Declaring variable to calculate the number of overflows needed to generate time delay bigger than the max time delay
	u32 Local_u32OverflowCounter = 0;
	
	if(Copy_u32Delayms < Local_f64MaxDely)
 8ee:	0e 94 21 06 	call	0xc42	; 0xc42 <__floatunsisf>
 8f2:	6b 01       	movw	r12, r22
 8f4:	7c 01       	movw	r14, r24
 8f6:	2f e6       	ldi	r18, 0x6F	; 111
 8f8:	32 e1       	ldi	r19, 0x12	; 18
 8fa:	43 e8       	ldi	r20, 0x83	; 131
 8fc:	52 e4       	ldi	r21, 0x42	; 66
 8fe:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__cmpsf2>
 902:	88 23       	and	r24, r24
 904:	c4 f4       	brge	.+48     	; 0x936 <TIMER_voidTimer0Delay+0x6a>
	{
		Local_u32TimerInitialValue = (Local_f64MaxDely - Copy_u32Delayms)/Local_f64TickTime;
 906:	a7 01       	movw	r20, r14
 908:	96 01       	movw	r18, r12
 90a:	6f e6       	ldi	r22, 0x6F	; 111
 90c:	72 e1       	ldi	r23, 0x12	; 18
 90e:	83 e8       	ldi	r24, 0x83	; 131
 910:	92 e4       	ldi	r25, 0x42	; 66
 912:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__subsf3>
 916:	2f e6       	ldi	r18, 0x6F	; 111
 918:	32 e1       	ldi	r19, 0x12	; 18
 91a:	43 e8       	ldi	r20, 0x83	; 131
 91c:	5e e3       	ldi	r21, 0x3E	; 62
 91e:	0e 94 80 05 	call	0xb00	; 0xb00 <__divsf3>
 922:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fixunssfsi>
		/*Setting initial value of the timer*/
		TCNT0 = Local_u32TimerInitialValue;
 926:	62 bf       	out	0x32, r22	; 50
		/*Busy waiting until overflow flag to be set*/
		while(GET_BIT(TIFR,TIFR_TOV0) == 0);
 928:	08 b6       	in	r0, 0x38	; 56
 92a:	00 fe       	sbrs	r0, 0
 92c:	fd cf       	rjmp	.-6      	; 0x928 <TIMER_voidTimer0Delay+0x5c>
		/*Clear the overflow flag*/
		SET_BIT(TIFR,TIFR_TOV0);
 92e:	88 b7       	in	r24, 0x38	; 56
 930:	81 60       	ori	r24, 0x01	; 1
 932:	88 bf       	out	0x38, r24	; 56
 934:	52 c0       	rjmp	.+164    	; 0x9da <TIMER_voidTimer0Delay+0x10e>
		
	}
	else if(Copy_u32Delayms == Local_f64MaxDely)
 936:	2f e6       	ldi	r18, 0x6F	; 111
 938:	32 e1       	ldi	r19, 0x12	; 18
 93a:	43 e8       	ldi	r20, 0x83	; 131
 93c:	52 e4       	ldi	r21, 0x42	; 66
 93e:	c7 01       	movw	r24, r14
 940:	b6 01       	movw	r22, r12
 942:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__cmpsf2>
 946:	81 11       	cpse	r24, r1
 948:	08 c0       	rjmp	.+16     	; 0x95a <TIMER_voidTimer0Delay+0x8e>
	{
		/*Setting initial value of the timer*/
		TCNT0 = 0x00;
 94a:	12 be       	out	0x32, r1	; 50
		/*Busy waiting until overflow flag to be set*/
		while(GET_BIT(TIFR,TIFR_TOV0) == 0);
 94c:	08 b6       	in	r0, 0x38	; 56
 94e:	00 fe       	sbrs	r0, 0
 950:	fd cf       	rjmp	.-6      	; 0x94c <TIMER_voidTimer0Delay+0x80>
		/*Clear the overflow flag*/
		SET_BIT(TIFR,TIFR_TOV0);
 952:	88 b7       	in	r24, 0x38	; 56
 954:	81 60       	ori	r24, 0x01	; 1
 956:	88 bf       	out	0x38, r24	; 56
 958:	40 c0       	rjmp	.+128    	; 0x9da <TIMER_voidTimer0Delay+0x10e>
	}
	else
	{
		Local_u32NumberOV = ceil(Copy_u32Delayms/Local_f64MaxDely);
 95a:	2f e6       	ldi	r18, 0x6F	; 111
 95c:	32 e1       	ldi	r19, 0x12	; 18
 95e:	43 e8       	ldi	r20, 0x83	; 131
 960:	52 e4       	ldi	r21, 0x42	; 66
 962:	c7 01       	movw	r24, r14
 964:	b6 01       	movw	r22, r12
 966:	0e 94 80 05 	call	0xb00	; 0xb00 <__divsf3>
 96a:	0e 94 64 05 	call	0xac8	; 0xac8 <ceil>
 96e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fixunssfsi>
 972:	4b 01       	movw	r8, r22
 974:	5c 01       	movw	r10, r24
		Local_u32TimerInitialValue =(1<<8) - ((Copy_u32Delayms/Local_f64TickTime) / Local_u32NumberOV);
 976:	2f e6       	ldi	r18, 0x6F	; 111
 978:	32 e1       	ldi	r19, 0x12	; 18
 97a:	43 e8       	ldi	r20, 0x83	; 131
 97c:	5e e3       	ldi	r21, 0x3E	; 62
 97e:	c7 01       	movw	r24, r14
 980:	b6 01       	movw	r22, r12
 982:	0e 94 80 05 	call	0xb00	; 0xb00 <__divsf3>
 986:	6b 01       	movw	r12, r22
 988:	7c 01       	movw	r14, r24
 98a:	c5 01       	movw	r24, r10
 98c:	b4 01       	movw	r22, r8
 98e:	0e 94 21 06 	call	0xc42	; 0xc42 <__floatunsisf>
 992:	9b 01       	movw	r18, r22
 994:	ac 01       	movw	r20, r24
 996:	c7 01       	movw	r24, r14
 998:	b6 01       	movw	r22, r12
 99a:	0e 94 80 05 	call	0xb00	; 0xb00 <__divsf3>
 99e:	9b 01       	movw	r18, r22
 9a0:	ac 01       	movw	r20, r24
 9a2:	60 e0       	ldi	r22, 0x00	; 0
 9a4:	70 e0       	ldi	r23, 0x00	; 0
 9a6:	80 e8       	ldi	r24, 0x80	; 128
 9a8:	93 e4       	ldi	r25, 0x43	; 67
 9aa:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__subsf3>
 9ae:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fixunssfsi>
		/*Setting initial value of the timer*/
		TCNT0 = Local_u32TimerInitialValue;
 9b2:	62 bf       	out	0x32, r22	; 50
	
	f64 Local_f64TickTime = 256.0/1000.0;		//Calculating Tick time with 256 prescaler
	f64 Local_f64MaxDely = Local_f64TickTime *(1<<8);	//Calculate the max delay we can get with the tick time we have
	u32 Local_u32TimerInitialValue;	// Declaring variable to calculate the initial timer value in each state
	u32 Local_u32NumberOV;	//Declaring variable to calculate the number of overflows needed to generate time delay bigger than the max time delay
	u32 Local_u32OverflowCounter = 0;
 9b4:	40 e0       	ldi	r20, 0x00	; 0
 9b6:	50 e0       	ldi	r21, 0x00	; 0
 9b8:	ba 01       	movw	r22, r20
		Local_u32NumberOV = ceil(Copy_u32Delayms/Local_f64MaxDely);
		Local_u32TimerInitialValue =(1<<8) - ((Copy_u32Delayms/Local_f64TickTime) / Local_u32NumberOV);
		/*Setting initial value of the timer*/
		TCNT0 = Local_u32TimerInitialValue;
		
		while(Local_u32OverflowCounter < Local_u32NumberOV)
 9ba:	0a c0       	rjmp	.+20     	; 0x9d0 <TIMER_voidTimer0Delay+0x104>
		{
			/*Busy waiting until overflow flag to be set*/
			while(GET_BIT(TIFR,TIFR_TOV0) == 0);
 9bc:	08 b6       	in	r0, 0x38	; 56
 9be:	00 fe       	sbrs	r0, 0
 9c0:	fd cf       	rjmp	.-6      	; 0x9bc <TIMER_voidTimer0Delay+0xf0>
			/*Clear the overflow flag*/
			SET_BIT(TIFR,TIFR_TOV0);
 9c2:	88 b7       	in	r24, 0x38	; 56
 9c4:	81 60       	ori	r24, 0x01	; 1
 9c6:	88 bf       	out	0x38, r24	; 56
			
			Local_u32OverflowCounter++;
 9c8:	4f 5f       	subi	r20, 0xFF	; 255
 9ca:	5f 4f       	sbci	r21, 0xFF	; 255
 9cc:	6f 4f       	sbci	r22, 0xFF	; 255
 9ce:	7f 4f       	sbci	r23, 0xFF	; 255
		Local_u32NumberOV = ceil(Copy_u32Delayms/Local_f64MaxDely);
		Local_u32TimerInitialValue =(1<<8) - ((Copy_u32Delayms/Local_f64TickTime) / Local_u32NumberOV);
		/*Setting initial value of the timer*/
		TCNT0 = Local_u32TimerInitialValue;
		
		while(Local_u32OverflowCounter < Local_u32NumberOV)
 9d0:	48 15       	cp	r20, r8
 9d2:	59 05       	cpc	r21, r9
 9d4:	6a 05       	cpc	r22, r10
 9d6:	7b 05       	cpc	r23, r11
 9d8:	88 f3       	brcs	.-30     	; 0x9bc <TIMER_voidTimer0Delay+0xf0>
		}
		
	}
		
	/*Timer Stop*/
	TCCR0 = 0x00;
 9da:	13 be       	out	0x33, r1	; 51
	
}
 9dc:	ff 90       	pop	r15
 9de:	ef 90       	pop	r14
 9e0:	df 90       	pop	r13
 9e2:	cf 90       	pop	r12
 9e4:	bf 90       	pop	r11
 9e6:	af 90       	pop	r10
 9e8:	9f 90       	pop	r9
 9ea:	8f 90       	pop	r8
 9ec:	08 95       	ret

000009ee <__subsf3>:
 9ee:	50 58       	subi	r21, 0x80	; 128

000009f0 <__addsf3>:
 9f0:	bb 27       	eor	r27, r27
 9f2:	aa 27       	eor	r26, r26
 9f4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__addsf3x>
 9f8:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__fp_round>
 9fc:	0e 94 b4 06 	call	0xd68	; 0xd68 <__fp_pscA>
 a00:	38 f0       	brcs	.+14     	; 0xa10 <__addsf3+0x20>
 a02:	0e 94 bb 06 	call	0xd76	; 0xd76 <__fp_pscB>
 a06:	20 f0       	brcs	.+8      	; 0xa10 <__addsf3+0x20>
 a08:	39 f4       	brne	.+14     	; 0xa18 <__addsf3+0x28>
 a0a:	9f 3f       	cpi	r25, 0xFF	; 255
 a0c:	19 f4       	brne	.+6      	; 0xa14 <__addsf3+0x24>
 a0e:	26 f4       	brtc	.+8      	; 0xa18 <__addsf3+0x28>
 a10:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__fp_nan>
 a14:	0e f4       	brtc	.+2      	; 0xa18 <__addsf3+0x28>
 a16:	e0 95       	com	r30
 a18:	e7 fb       	bst	r30, 7
 a1a:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_inf>

00000a1e <__addsf3x>:
 a1e:	e9 2f       	mov	r30, r25
 a20:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_split3>
 a24:	58 f3       	brcs	.-42     	; 0x9fc <__addsf3+0xc>
 a26:	ba 17       	cp	r27, r26
 a28:	62 07       	cpc	r22, r18
 a2a:	73 07       	cpc	r23, r19
 a2c:	84 07       	cpc	r24, r20
 a2e:	95 07       	cpc	r25, r21
 a30:	20 f0       	brcs	.+8      	; 0xa3a <__addsf3x+0x1c>
 a32:	79 f4       	brne	.+30     	; 0xa52 <__addsf3x+0x34>
 a34:	a6 f5       	brtc	.+104    	; 0xa9e <__addsf3x+0x80>
 a36:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_zero>
 a3a:	0e f4       	brtc	.+2      	; 0xa3e <__addsf3x+0x20>
 a3c:	e0 95       	com	r30
 a3e:	0b 2e       	mov	r0, r27
 a40:	ba 2f       	mov	r27, r26
 a42:	a0 2d       	mov	r26, r0
 a44:	0b 01       	movw	r0, r22
 a46:	b9 01       	movw	r22, r18
 a48:	90 01       	movw	r18, r0
 a4a:	0c 01       	movw	r0, r24
 a4c:	ca 01       	movw	r24, r20
 a4e:	a0 01       	movw	r20, r0
 a50:	11 24       	eor	r1, r1
 a52:	ff 27       	eor	r31, r31
 a54:	59 1b       	sub	r21, r25
 a56:	99 f0       	breq	.+38     	; 0xa7e <__addsf3x+0x60>
 a58:	59 3f       	cpi	r21, 0xF9	; 249
 a5a:	50 f4       	brcc	.+20     	; 0xa70 <__addsf3x+0x52>
 a5c:	50 3e       	cpi	r21, 0xE0	; 224
 a5e:	68 f1       	brcs	.+90     	; 0xaba <__addsf3x+0x9c>
 a60:	1a 16       	cp	r1, r26
 a62:	f0 40       	sbci	r31, 0x00	; 0
 a64:	a2 2f       	mov	r26, r18
 a66:	23 2f       	mov	r18, r19
 a68:	34 2f       	mov	r19, r20
 a6a:	44 27       	eor	r20, r20
 a6c:	58 5f       	subi	r21, 0xF8	; 248
 a6e:	f3 cf       	rjmp	.-26     	; 0xa56 <__addsf3x+0x38>
 a70:	46 95       	lsr	r20
 a72:	37 95       	ror	r19
 a74:	27 95       	ror	r18
 a76:	a7 95       	ror	r26
 a78:	f0 40       	sbci	r31, 0x00	; 0
 a7a:	53 95       	inc	r21
 a7c:	c9 f7       	brne	.-14     	; 0xa70 <__addsf3x+0x52>
 a7e:	7e f4       	brtc	.+30     	; 0xa9e <__addsf3x+0x80>
 a80:	1f 16       	cp	r1, r31
 a82:	ba 0b       	sbc	r27, r26
 a84:	62 0b       	sbc	r22, r18
 a86:	73 0b       	sbc	r23, r19
 a88:	84 0b       	sbc	r24, r20
 a8a:	ba f0       	brmi	.+46     	; 0xaba <__addsf3x+0x9c>
 a8c:	91 50       	subi	r25, 0x01	; 1
 a8e:	a1 f0       	breq	.+40     	; 0xab8 <__addsf3x+0x9a>
 a90:	ff 0f       	add	r31, r31
 a92:	bb 1f       	adc	r27, r27
 a94:	66 1f       	adc	r22, r22
 a96:	77 1f       	adc	r23, r23
 a98:	88 1f       	adc	r24, r24
 a9a:	c2 f7       	brpl	.-16     	; 0xa8c <__addsf3x+0x6e>
 a9c:	0e c0       	rjmp	.+28     	; 0xaba <__addsf3x+0x9c>
 a9e:	ba 0f       	add	r27, r26
 aa0:	62 1f       	adc	r22, r18
 aa2:	73 1f       	adc	r23, r19
 aa4:	84 1f       	adc	r24, r20
 aa6:	48 f4       	brcc	.+18     	; 0xaba <__addsf3x+0x9c>
 aa8:	87 95       	ror	r24
 aaa:	77 95       	ror	r23
 aac:	67 95       	ror	r22
 aae:	b7 95       	ror	r27
 ab0:	f7 95       	ror	r31
 ab2:	9e 3f       	cpi	r25, 0xFE	; 254
 ab4:	08 f0       	brcs	.+2      	; 0xab8 <__addsf3x+0x9a>
 ab6:	b0 cf       	rjmp	.-160    	; 0xa18 <__addsf3+0x28>
 ab8:	93 95       	inc	r25
 aba:	88 0f       	add	r24, r24
 abc:	08 f0       	brcs	.+2      	; 0xac0 <__addsf3x+0xa2>
 abe:	99 27       	eor	r25, r25
 ac0:	ee 0f       	add	r30, r30
 ac2:	97 95       	ror	r25
 ac4:	87 95       	ror	r24
 ac6:	08 95       	ret

00000ac8 <ceil>:
 ac8:	0e 94 f5 06 	call	0xdea	; 0xdea <__fp_trunc>
 acc:	90 f0       	brcs	.+36     	; 0xaf2 <ceil+0x2a>
 ace:	9f 37       	cpi	r25, 0x7F	; 127
 ad0:	48 f4       	brcc	.+18     	; 0xae4 <ceil+0x1c>
 ad2:	91 11       	cpse	r25, r1
 ad4:	16 f4       	brtc	.+4      	; 0xada <ceil+0x12>
 ad6:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>
 ada:	60 e0       	ldi	r22, 0x00	; 0
 adc:	70 e0       	ldi	r23, 0x00	; 0
 ade:	80 e8       	ldi	r24, 0x80	; 128
 ae0:	9f e3       	ldi	r25, 0x3F	; 63
 ae2:	08 95       	ret
 ae4:	26 f0       	brts	.+8      	; 0xaee <ceil+0x26>
 ae6:	1b 16       	cp	r1, r27
 ae8:	61 1d       	adc	r22, r1
 aea:	71 1d       	adc	r23, r1
 aec:	81 1d       	adc	r24, r1
 aee:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__fp_mintl>
 af2:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__fp_mpack>

00000af6 <__cmpsf2>:
 af6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fp_cmp>
 afa:	08 f4       	brcc	.+2      	; 0xafe <__cmpsf2+0x8>
 afc:	81 e0       	ldi	r24, 0x01	; 1
 afe:	08 95       	ret

00000b00 <__divsf3>:
 b00:	0e 94 94 05 	call	0xb28	; 0xb28 <__divsf3x>
 b04:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__fp_round>
 b08:	0e 94 bb 06 	call	0xd76	; 0xd76 <__fp_pscB>
 b0c:	58 f0       	brcs	.+22     	; 0xb24 <__divsf3+0x24>
 b0e:	0e 94 b4 06 	call	0xd68	; 0xd68 <__fp_pscA>
 b12:	40 f0       	brcs	.+16     	; 0xb24 <__divsf3+0x24>
 b14:	29 f4       	brne	.+10     	; 0xb20 <__divsf3+0x20>
 b16:	5f 3f       	cpi	r21, 0xFF	; 255
 b18:	29 f0       	breq	.+10     	; 0xb24 <__divsf3+0x24>
 b1a:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_inf>
 b1e:	51 11       	cpse	r21, r1
 b20:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>
 b24:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__fp_nan>

00000b28 <__divsf3x>:
 b28:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_split3>
 b2c:	68 f3       	brcs	.-38     	; 0xb08 <__divsf3+0x8>

00000b2e <__divsf3_pse>:
 b2e:	99 23       	and	r25, r25
 b30:	b1 f3       	breq	.-20     	; 0xb1e <__divsf3+0x1e>
 b32:	55 23       	and	r21, r21
 b34:	91 f3       	breq	.-28     	; 0xb1a <__divsf3+0x1a>
 b36:	95 1b       	sub	r25, r21
 b38:	55 0b       	sbc	r21, r21
 b3a:	bb 27       	eor	r27, r27
 b3c:	aa 27       	eor	r26, r26
 b3e:	62 17       	cp	r22, r18
 b40:	73 07       	cpc	r23, r19
 b42:	84 07       	cpc	r24, r20
 b44:	38 f0       	brcs	.+14     	; 0xb54 <__divsf3_pse+0x26>
 b46:	9f 5f       	subi	r25, 0xFF	; 255
 b48:	5f 4f       	sbci	r21, 0xFF	; 255
 b4a:	22 0f       	add	r18, r18
 b4c:	33 1f       	adc	r19, r19
 b4e:	44 1f       	adc	r20, r20
 b50:	aa 1f       	adc	r26, r26
 b52:	a9 f3       	breq	.-22     	; 0xb3e <__divsf3_pse+0x10>
 b54:	35 d0       	rcall	.+106    	; 0xbc0 <__divsf3_pse+0x92>
 b56:	0e 2e       	mov	r0, r30
 b58:	3a f0       	brmi	.+14     	; 0xb68 <__divsf3_pse+0x3a>
 b5a:	e0 e8       	ldi	r30, 0x80	; 128
 b5c:	32 d0       	rcall	.+100    	; 0xbc2 <__divsf3_pse+0x94>
 b5e:	91 50       	subi	r25, 0x01	; 1
 b60:	50 40       	sbci	r21, 0x00	; 0
 b62:	e6 95       	lsr	r30
 b64:	00 1c       	adc	r0, r0
 b66:	ca f7       	brpl	.-14     	; 0xb5a <__divsf3_pse+0x2c>
 b68:	2b d0       	rcall	.+86     	; 0xbc0 <__divsf3_pse+0x92>
 b6a:	fe 2f       	mov	r31, r30
 b6c:	29 d0       	rcall	.+82     	; 0xbc0 <__divsf3_pse+0x92>
 b6e:	66 0f       	add	r22, r22
 b70:	77 1f       	adc	r23, r23
 b72:	88 1f       	adc	r24, r24
 b74:	bb 1f       	adc	r27, r27
 b76:	26 17       	cp	r18, r22
 b78:	37 07       	cpc	r19, r23
 b7a:	48 07       	cpc	r20, r24
 b7c:	ab 07       	cpc	r26, r27
 b7e:	b0 e8       	ldi	r27, 0x80	; 128
 b80:	09 f0       	breq	.+2      	; 0xb84 <__divsf3_pse+0x56>
 b82:	bb 0b       	sbc	r27, r27
 b84:	80 2d       	mov	r24, r0
 b86:	bf 01       	movw	r22, r30
 b88:	ff 27       	eor	r31, r31
 b8a:	93 58       	subi	r25, 0x83	; 131
 b8c:	5f 4f       	sbci	r21, 0xFF	; 255
 b8e:	3a f0       	brmi	.+14     	; 0xb9e <__divsf3_pse+0x70>
 b90:	9e 3f       	cpi	r25, 0xFE	; 254
 b92:	51 05       	cpc	r21, r1
 b94:	78 f0       	brcs	.+30     	; 0xbb4 <__divsf3_pse+0x86>
 b96:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_inf>
 b9a:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>
 b9e:	5f 3f       	cpi	r21, 0xFF	; 255
 ba0:	e4 f3       	brlt	.-8      	; 0xb9a <__divsf3_pse+0x6c>
 ba2:	98 3e       	cpi	r25, 0xE8	; 232
 ba4:	d4 f3       	brlt	.-12     	; 0xb9a <__divsf3_pse+0x6c>
 ba6:	86 95       	lsr	r24
 ba8:	77 95       	ror	r23
 baa:	67 95       	ror	r22
 bac:	b7 95       	ror	r27
 bae:	f7 95       	ror	r31
 bb0:	9f 5f       	subi	r25, 0xFF	; 255
 bb2:	c9 f7       	brne	.-14     	; 0xba6 <__divsf3_pse+0x78>
 bb4:	88 0f       	add	r24, r24
 bb6:	91 1d       	adc	r25, r1
 bb8:	96 95       	lsr	r25
 bba:	87 95       	ror	r24
 bbc:	97 f9       	bld	r25, 7
 bbe:	08 95       	ret
 bc0:	e1 e0       	ldi	r30, 0x01	; 1
 bc2:	66 0f       	add	r22, r22
 bc4:	77 1f       	adc	r23, r23
 bc6:	88 1f       	adc	r24, r24
 bc8:	bb 1f       	adc	r27, r27
 bca:	62 17       	cp	r22, r18
 bcc:	73 07       	cpc	r23, r19
 bce:	84 07       	cpc	r24, r20
 bd0:	ba 07       	cpc	r27, r26
 bd2:	20 f0       	brcs	.+8      	; 0xbdc <__divsf3_pse+0xae>
 bd4:	62 1b       	sub	r22, r18
 bd6:	73 0b       	sbc	r23, r19
 bd8:	84 0b       	sbc	r24, r20
 bda:	ba 0b       	sbc	r27, r26
 bdc:	ee 1f       	adc	r30, r30
 bde:	88 f7       	brcc	.-30     	; 0xbc2 <__divsf3_pse+0x94>
 be0:	e0 95       	com	r30
 be2:	08 95       	ret

00000be4 <__fixunssfsi>:
 be4:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__fp_splitA>
 be8:	88 f0       	brcs	.+34     	; 0xc0c <__fixunssfsi+0x28>
 bea:	9f 57       	subi	r25, 0x7F	; 127
 bec:	98 f0       	brcs	.+38     	; 0xc14 <__fixunssfsi+0x30>
 bee:	b9 2f       	mov	r27, r25
 bf0:	99 27       	eor	r25, r25
 bf2:	b7 51       	subi	r27, 0x17	; 23
 bf4:	b0 f0       	brcs	.+44     	; 0xc22 <__fixunssfsi+0x3e>
 bf6:	e1 f0       	breq	.+56     	; 0xc30 <__fixunssfsi+0x4c>
 bf8:	66 0f       	add	r22, r22
 bfa:	77 1f       	adc	r23, r23
 bfc:	88 1f       	adc	r24, r24
 bfe:	99 1f       	adc	r25, r25
 c00:	1a f0       	brmi	.+6      	; 0xc08 <__fixunssfsi+0x24>
 c02:	ba 95       	dec	r27
 c04:	c9 f7       	brne	.-14     	; 0xbf8 <__fixunssfsi+0x14>
 c06:	14 c0       	rjmp	.+40     	; 0xc30 <__fixunssfsi+0x4c>
 c08:	b1 30       	cpi	r27, 0x01	; 1
 c0a:	91 f0       	breq	.+36     	; 0xc30 <__fixunssfsi+0x4c>
 c0c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_zero>
 c10:	b1 e0       	ldi	r27, 0x01	; 1
 c12:	08 95       	ret
 c14:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_zero>
 c18:	67 2f       	mov	r22, r23
 c1a:	78 2f       	mov	r23, r24
 c1c:	88 27       	eor	r24, r24
 c1e:	b8 5f       	subi	r27, 0xF8	; 248
 c20:	39 f0       	breq	.+14     	; 0xc30 <__fixunssfsi+0x4c>
 c22:	b9 3f       	cpi	r27, 0xF9	; 249
 c24:	cc f3       	brlt	.-14     	; 0xc18 <__fixunssfsi+0x34>
 c26:	86 95       	lsr	r24
 c28:	77 95       	ror	r23
 c2a:	67 95       	ror	r22
 c2c:	b3 95       	inc	r27
 c2e:	d9 f7       	brne	.-10     	; 0xc26 <__fixunssfsi+0x42>
 c30:	3e f4       	brtc	.+14     	; 0xc40 <__fixunssfsi+0x5c>
 c32:	90 95       	com	r25
 c34:	80 95       	com	r24
 c36:	70 95       	com	r23
 c38:	61 95       	neg	r22
 c3a:	7f 4f       	sbci	r23, 0xFF	; 255
 c3c:	8f 4f       	sbci	r24, 0xFF	; 255
 c3e:	9f 4f       	sbci	r25, 0xFF	; 255
 c40:	08 95       	ret

00000c42 <__floatunsisf>:
 c42:	e8 94       	clt
 c44:	09 c0       	rjmp	.+18     	; 0xc58 <__floatsisf+0x12>

00000c46 <__floatsisf>:
 c46:	97 fb       	bst	r25, 7
 c48:	3e f4       	brtc	.+14     	; 0xc58 <__floatsisf+0x12>
 c4a:	90 95       	com	r25
 c4c:	80 95       	com	r24
 c4e:	70 95       	com	r23
 c50:	61 95       	neg	r22
 c52:	7f 4f       	sbci	r23, 0xFF	; 255
 c54:	8f 4f       	sbci	r24, 0xFF	; 255
 c56:	9f 4f       	sbci	r25, 0xFF	; 255
 c58:	99 23       	and	r25, r25
 c5a:	a9 f0       	breq	.+42     	; 0xc86 <__floatsisf+0x40>
 c5c:	f9 2f       	mov	r31, r25
 c5e:	96 e9       	ldi	r25, 0x96	; 150
 c60:	bb 27       	eor	r27, r27
 c62:	93 95       	inc	r25
 c64:	f6 95       	lsr	r31
 c66:	87 95       	ror	r24
 c68:	77 95       	ror	r23
 c6a:	67 95       	ror	r22
 c6c:	b7 95       	ror	r27
 c6e:	f1 11       	cpse	r31, r1
 c70:	f8 cf       	rjmp	.-16     	; 0xc62 <__floatsisf+0x1c>
 c72:	fa f4       	brpl	.+62     	; 0xcb2 <__floatsisf+0x6c>
 c74:	bb 0f       	add	r27, r27
 c76:	11 f4       	brne	.+4      	; 0xc7c <__floatsisf+0x36>
 c78:	60 ff       	sbrs	r22, 0
 c7a:	1b c0       	rjmp	.+54     	; 0xcb2 <__floatsisf+0x6c>
 c7c:	6f 5f       	subi	r22, 0xFF	; 255
 c7e:	7f 4f       	sbci	r23, 0xFF	; 255
 c80:	8f 4f       	sbci	r24, 0xFF	; 255
 c82:	9f 4f       	sbci	r25, 0xFF	; 255
 c84:	16 c0       	rjmp	.+44     	; 0xcb2 <__floatsisf+0x6c>
 c86:	88 23       	and	r24, r24
 c88:	11 f0       	breq	.+4      	; 0xc8e <__floatsisf+0x48>
 c8a:	96 e9       	ldi	r25, 0x96	; 150
 c8c:	11 c0       	rjmp	.+34     	; 0xcb0 <__floatsisf+0x6a>
 c8e:	77 23       	and	r23, r23
 c90:	21 f0       	breq	.+8      	; 0xc9a <__floatsisf+0x54>
 c92:	9e e8       	ldi	r25, 0x8E	; 142
 c94:	87 2f       	mov	r24, r23
 c96:	76 2f       	mov	r23, r22
 c98:	05 c0       	rjmp	.+10     	; 0xca4 <__floatsisf+0x5e>
 c9a:	66 23       	and	r22, r22
 c9c:	71 f0       	breq	.+28     	; 0xcba <__floatsisf+0x74>
 c9e:	96 e8       	ldi	r25, 0x86	; 134
 ca0:	86 2f       	mov	r24, r22
 ca2:	70 e0       	ldi	r23, 0x00	; 0
 ca4:	60 e0       	ldi	r22, 0x00	; 0
 ca6:	2a f0       	brmi	.+10     	; 0xcb2 <__floatsisf+0x6c>
 ca8:	9a 95       	dec	r25
 caa:	66 0f       	add	r22, r22
 cac:	77 1f       	adc	r23, r23
 cae:	88 1f       	adc	r24, r24
 cb0:	da f7       	brpl	.-10     	; 0xca8 <__floatsisf+0x62>
 cb2:	88 0f       	add	r24, r24
 cb4:	96 95       	lsr	r25
 cb6:	87 95       	ror	r24
 cb8:	97 f9       	bld	r25, 7
 cba:	08 95       	ret

00000cbc <__fp_cmp>:
 cbc:	99 0f       	add	r25, r25
 cbe:	00 08       	sbc	r0, r0
 cc0:	55 0f       	add	r21, r21
 cc2:	aa 0b       	sbc	r26, r26
 cc4:	e0 e8       	ldi	r30, 0x80	; 128
 cc6:	fe ef       	ldi	r31, 0xFE	; 254
 cc8:	16 16       	cp	r1, r22
 cca:	17 06       	cpc	r1, r23
 ccc:	e8 07       	cpc	r30, r24
 cce:	f9 07       	cpc	r31, r25
 cd0:	c0 f0       	brcs	.+48     	; 0xd02 <__fp_cmp+0x46>
 cd2:	12 16       	cp	r1, r18
 cd4:	13 06       	cpc	r1, r19
 cd6:	e4 07       	cpc	r30, r20
 cd8:	f5 07       	cpc	r31, r21
 cda:	98 f0       	brcs	.+38     	; 0xd02 <__fp_cmp+0x46>
 cdc:	62 1b       	sub	r22, r18
 cde:	73 0b       	sbc	r23, r19
 ce0:	84 0b       	sbc	r24, r20
 ce2:	95 0b       	sbc	r25, r21
 ce4:	39 f4       	brne	.+14     	; 0xcf4 <__fp_cmp+0x38>
 ce6:	0a 26       	eor	r0, r26
 ce8:	61 f0       	breq	.+24     	; 0xd02 <__fp_cmp+0x46>
 cea:	23 2b       	or	r18, r19
 cec:	24 2b       	or	r18, r20
 cee:	25 2b       	or	r18, r21
 cf0:	21 f4       	brne	.+8      	; 0xcfa <__fp_cmp+0x3e>
 cf2:	08 95       	ret
 cf4:	0a 26       	eor	r0, r26
 cf6:	09 f4       	brne	.+2      	; 0xcfa <__fp_cmp+0x3e>
 cf8:	a1 40       	sbci	r26, 0x01	; 1
 cfa:	a6 95       	lsr	r26
 cfc:	8f ef       	ldi	r24, 0xFF	; 255
 cfe:	81 1d       	adc	r24, r1
 d00:	81 1d       	adc	r24, r1
 d02:	08 95       	ret

00000d04 <__fp_inf>:
 d04:	97 f9       	bld	r25, 7
 d06:	9f 67       	ori	r25, 0x7F	; 127
 d08:	80 e8       	ldi	r24, 0x80	; 128
 d0a:	70 e0       	ldi	r23, 0x00	; 0
 d0c:	60 e0       	ldi	r22, 0x00	; 0
 d0e:	08 95       	ret

00000d10 <__fp_mintl>:
 d10:	88 23       	and	r24, r24
 d12:	71 f4       	brne	.+28     	; 0xd30 <__fp_mintl+0x20>
 d14:	77 23       	and	r23, r23
 d16:	21 f0       	breq	.+8      	; 0xd20 <__fp_mintl+0x10>
 d18:	98 50       	subi	r25, 0x08	; 8
 d1a:	87 2b       	or	r24, r23
 d1c:	76 2f       	mov	r23, r22
 d1e:	07 c0       	rjmp	.+14     	; 0xd2e <__fp_mintl+0x1e>
 d20:	66 23       	and	r22, r22
 d22:	11 f4       	brne	.+4      	; 0xd28 <__fp_mintl+0x18>
 d24:	99 27       	eor	r25, r25
 d26:	0d c0       	rjmp	.+26     	; 0xd42 <__fp_mintl+0x32>
 d28:	90 51       	subi	r25, 0x10	; 16
 d2a:	86 2b       	or	r24, r22
 d2c:	70 e0       	ldi	r23, 0x00	; 0
 d2e:	60 e0       	ldi	r22, 0x00	; 0
 d30:	2a f0       	brmi	.+10     	; 0xd3c <__fp_mintl+0x2c>
 d32:	9a 95       	dec	r25
 d34:	66 0f       	add	r22, r22
 d36:	77 1f       	adc	r23, r23
 d38:	88 1f       	adc	r24, r24
 d3a:	da f7       	brpl	.-10     	; 0xd32 <__fp_mintl+0x22>
 d3c:	88 0f       	add	r24, r24
 d3e:	96 95       	lsr	r25
 d40:	87 95       	ror	r24
 d42:	97 f9       	bld	r25, 7
 d44:	08 95       	ret

00000d46 <__fp_mpack>:
 d46:	9f 3f       	cpi	r25, 0xFF	; 255
 d48:	31 f0       	breq	.+12     	; 0xd56 <__fp_mpack_finite+0xc>

00000d4a <__fp_mpack_finite>:
 d4a:	91 50       	subi	r25, 0x01	; 1
 d4c:	20 f4       	brcc	.+8      	; 0xd56 <__fp_mpack_finite+0xc>
 d4e:	87 95       	ror	r24
 d50:	77 95       	ror	r23
 d52:	67 95       	ror	r22
 d54:	b7 95       	ror	r27
 d56:	88 0f       	add	r24, r24
 d58:	91 1d       	adc	r25, r1
 d5a:	96 95       	lsr	r25
 d5c:	87 95       	ror	r24
 d5e:	97 f9       	bld	r25, 7
 d60:	08 95       	ret

00000d62 <__fp_nan>:
 d62:	9f ef       	ldi	r25, 0xFF	; 255
 d64:	80 ec       	ldi	r24, 0xC0	; 192
 d66:	08 95       	ret

00000d68 <__fp_pscA>:
 d68:	00 24       	eor	r0, r0
 d6a:	0a 94       	dec	r0
 d6c:	16 16       	cp	r1, r22
 d6e:	17 06       	cpc	r1, r23
 d70:	18 06       	cpc	r1, r24
 d72:	09 06       	cpc	r0, r25
 d74:	08 95       	ret

00000d76 <__fp_pscB>:
 d76:	00 24       	eor	r0, r0
 d78:	0a 94       	dec	r0
 d7a:	12 16       	cp	r1, r18
 d7c:	13 06       	cpc	r1, r19
 d7e:	14 06       	cpc	r1, r20
 d80:	05 06       	cpc	r0, r21
 d82:	08 95       	ret

00000d84 <__fp_round>:
 d84:	09 2e       	mov	r0, r25
 d86:	03 94       	inc	r0
 d88:	00 0c       	add	r0, r0
 d8a:	11 f4       	brne	.+4      	; 0xd90 <__fp_round+0xc>
 d8c:	88 23       	and	r24, r24
 d8e:	52 f0       	brmi	.+20     	; 0xda4 <__fp_round+0x20>
 d90:	bb 0f       	add	r27, r27
 d92:	40 f4       	brcc	.+16     	; 0xda4 <__fp_round+0x20>
 d94:	bf 2b       	or	r27, r31
 d96:	11 f4       	brne	.+4      	; 0xd9c <__fp_round+0x18>
 d98:	60 ff       	sbrs	r22, 0
 d9a:	04 c0       	rjmp	.+8      	; 0xda4 <__fp_round+0x20>
 d9c:	6f 5f       	subi	r22, 0xFF	; 255
 d9e:	7f 4f       	sbci	r23, 0xFF	; 255
 da0:	8f 4f       	sbci	r24, 0xFF	; 255
 da2:	9f 4f       	sbci	r25, 0xFF	; 255
 da4:	08 95       	ret

00000da6 <__fp_split3>:
 da6:	57 fd       	sbrc	r21, 7
 da8:	90 58       	subi	r25, 0x80	; 128
 daa:	44 0f       	add	r20, r20
 dac:	55 1f       	adc	r21, r21
 dae:	59 f0       	breq	.+22     	; 0xdc6 <__fp_splitA+0x10>
 db0:	5f 3f       	cpi	r21, 0xFF	; 255
 db2:	71 f0       	breq	.+28     	; 0xdd0 <__fp_splitA+0x1a>
 db4:	47 95       	ror	r20

00000db6 <__fp_splitA>:
 db6:	88 0f       	add	r24, r24
 db8:	97 fb       	bst	r25, 7
 dba:	99 1f       	adc	r25, r25
 dbc:	61 f0       	breq	.+24     	; 0xdd6 <__fp_splitA+0x20>
 dbe:	9f 3f       	cpi	r25, 0xFF	; 255
 dc0:	79 f0       	breq	.+30     	; 0xde0 <__fp_splitA+0x2a>
 dc2:	87 95       	ror	r24
 dc4:	08 95       	ret
 dc6:	12 16       	cp	r1, r18
 dc8:	13 06       	cpc	r1, r19
 dca:	14 06       	cpc	r1, r20
 dcc:	55 1f       	adc	r21, r21
 dce:	f2 cf       	rjmp	.-28     	; 0xdb4 <__fp_split3+0xe>
 dd0:	46 95       	lsr	r20
 dd2:	f1 df       	rcall	.-30     	; 0xdb6 <__fp_splitA>
 dd4:	08 c0       	rjmp	.+16     	; 0xde6 <__fp_splitA+0x30>
 dd6:	16 16       	cp	r1, r22
 dd8:	17 06       	cpc	r1, r23
 dda:	18 06       	cpc	r1, r24
 ddc:	99 1f       	adc	r25, r25
 dde:	f1 cf       	rjmp	.-30     	; 0xdc2 <__fp_splitA+0xc>
 de0:	86 95       	lsr	r24
 de2:	71 05       	cpc	r23, r1
 de4:	61 05       	cpc	r22, r1
 de6:	08 94       	sec
 de8:	08 95       	ret

00000dea <__fp_trunc>:
 dea:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__fp_splitA>
 dee:	a0 f0       	brcs	.+40     	; 0xe18 <__fp_trunc+0x2e>
 df0:	be e7       	ldi	r27, 0x7E	; 126
 df2:	b9 17       	cp	r27, r25
 df4:	88 f4       	brcc	.+34     	; 0xe18 <__fp_trunc+0x2e>
 df6:	bb 27       	eor	r27, r27
 df8:	9f 38       	cpi	r25, 0x8F	; 143
 dfa:	60 f4       	brcc	.+24     	; 0xe14 <__fp_trunc+0x2a>
 dfc:	16 16       	cp	r1, r22
 dfe:	b1 1d       	adc	r27, r1
 e00:	67 2f       	mov	r22, r23
 e02:	78 2f       	mov	r23, r24
 e04:	88 27       	eor	r24, r24
 e06:	98 5f       	subi	r25, 0xF8	; 248
 e08:	f7 cf       	rjmp	.-18     	; 0xdf8 <__fp_trunc+0xe>
 e0a:	86 95       	lsr	r24
 e0c:	77 95       	ror	r23
 e0e:	67 95       	ror	r22
 e10:	b1 1d       	adc	r27, r1
 e12:	93 95       	inc	r25
 e14:	96 39       	cpi	r25, 0x96	; 150
 e16:	c8 f3       	brcs	.-14     	; 0xe0a <__fp_trunc+0x20>
 e18:	08 95       	ret

00000e1a <__fp_zero>:
 e1a:	e8 94       	clt

00000e1c <__fp_szero>:
 e1c:	bb 27       	eor	r27, r27
 e1e:	66 27       	eor	r22, r22
 e20:	77 27       	eor	r23, r23
 e22:	cb 01       	movw	r24, r22
 e24:	97 f9       	bld	r25, 7
 e26:	08 95       	ret

00000e28 <_exit>:
 e28:	f8 94       	cli

00000e2a <__stop_program>:
 e2a:	ff cf       	rjmp	.-2      	; 0xe2a <__stop_program>
